!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
CLOSE_TIME_SPAN	Plugin_interface.cpp	13;"	d	language:C++	file:
DEBUG	handle_error.cpp	10;"	d	language:C++	file:
PLUGIN_MAIN_NAME	Plugin_interface.cpp	12;"	d	language:C++	file:
Plugin_interface	Plugin_interface.h	/^class Plugin_interface$/;"	c	language:C++
Plugin_interface::m_sock	Plugin_interface.h	/^		Tcp_Socket m_sock;$/;"	m	language:C++	class:Plugin_interface	access:private
Plugin_interface::notify	Plugin_interface.cpp	/^Plugin_interface::notify()$/;"	f	language:C++	class:Plugin_interface	signature:()
Plugin_interface::notify	Plugin_interface.h	/^		void notify();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
Plugin_interface::start	Plugin_interface.cpp	/^Plugin_interface::start()$/;"	f	language:C++	class:Plugin_interface	signature:()
Plugin_interface::start	Plugin_interface.h	/^		void start();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
Plugin_interface::stop	Plugin_interface.cpp	/^Plugin_interface::stop()$/;"	f	language:C++	class:Plugin_interface	signature:()
Plugin_interface::stop	Plugin_interface.h	/^		void stop();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
Sock_addr	Sock_addr.cpp	/^Sock_addr::Sock_addr(): m_port(0)$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr	Sock_addr.h	/^	Sock_addr();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Sock_addr	Sock_addr.h	/^class Sock_addr$/;"	c	language:C++
Sock_addr::Sock_addr	Sock_addr.cpp	/^Sock_addr::Sock_addr(): m_port(0)$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr::Sock_addr	Sock_addr.h	/^	Sock_addr();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Sock_addr::get_ip	Sock_addr.cpp	/^std::string Sock_addr::get_ip()$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr::get_ip	Sock_addr.h	/^	std::string get_ip();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Sock_addr::get_port	Sock_addr.cpp	/^int Sock_addr::get_port()$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr::get_port	Sock_addr.h	/^	int get_port();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Sock_addr::get_sockaddr_in	Sock_addr.cpp	/^struct sockaddr_in Sock_addr::get_sockaddr_in()$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr::get_sockaddr_in	Sock_addr.cpp	/^void Sock_addr::get_sockaddr_in(struct sockaddr_in &sin)$/;"	f	language:C++	class:Sock_addr	signature:(struct sockaddr_in &sin)
Sock_addr::get_sockaddr_in	Sock_addr.h	/^	struct sockaddr_in get_sockaddr_in();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Sock_addr::get_sockaddr_in	Sock_addr.h	/^	void get_sockaddr_in(struct sockaddr_in &sin);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(struct sockaddr_in &sin)
Sock_addr::m_ip_string	Sock_addr.h	/^	std::string m_ip_string;$/;"	m	language:C++	class:Sock_addr	access:private
Sock_addr::m_port	Sock_addr.h	/^	int m_port;$/;"	m	language:C++	class:Sock_addr	access:private
Sock_addr::m_sin	Sock_addr.h	/^	struct sockaddr_in m_sin;$/;"	m	language:C++	class:Sock_addr	access:private
Sock_addr::operator =	Sock_addr.cpp	/^Sock_addr &Sock_addr::operator = (const Sock_addr &sa)$/;"	f	language:C++	class:Sock_addr	signature:(const Sock_addr &sa)
Sock_addr::operator =	Sock_addr.h	/^	Sock_addr &operator = (const Sock_addr &sa);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(const Sock_addr &sa)
Sock_addr::operator ==	Sock_addr.cpp	/^bool Sock_addr::operator == (const Sock_addr &sa) const$/;"	f	language:C++	class:Sock_addr	signature:(const Sock_addr &sa) const
Sock_addr::operator ==	Sock_addr.h	/^	bool operator == (const Sock_addr &sa) const;$/;"	p	language:C++	class:Sock_addr	access:public	signature:(const Sock_addr &sa) const
Sock_addr::set	Sock_addr.cpp	/^int Sock_addr::set(std::string ip, int port)$/;"	f	language:C++	class:Sock_addr	signature:(std::string ip, int port)
Sock_addr::set	Sock_addr.h	/^	int set(std::string ip, int port = 0);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(std::string ip, int port = 0)
Sock_addr::set_by_sockaddr_in	Sock_addr.cpp	/^int Sock_addr::set_by_sockaddr_in(struct sockaddr_in &sin, int socklen)$/;"	f	language:C++	class:Sock_addr	signature:(struct sockaddr_in &sin, int socklen)
Sock_addr::set_by_sockaddr_in	Sock_addr.h	/^	int set_by_sockaddr_in(struct sockaddr_in &sin, int socklen);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(struct sockaddr_in &sin, int socklen)
Sock_addr::~Sock_addr	Sock_addr.cpp	/^Sock_addr::~Sock_addr()$/;"	f	language:C++	class:Sock_addr	signature:()
Sock_addr::~Sock_addr	Sock_addr.h	/^	~Sock_addr();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::Tcp_Socket(): m_fd(-1)$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::Tcp_Socket(int fd): m_fd(fd)$/;"	f	language:C++	class:Tcp_Socket	signature:(int fd)
Tcp_Socket	Tcp_socket.h	/^		Tcp_Socket();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket	Tcp_socket.h	/^		Tcp_Socket(int fd);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int fd)
Tcp_Socket	Tcp_socket.h	/^class Tcp_Socket$/;"	c	language:C++
Tcp_Socket::Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::Tcp_Socket(): m_fd(-1)$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::Tcp_Socket(int fd): m_fd(fd)$/;"	f	language:C++	class:Tcp_Socket	signature:(int fd)
Tcp_Socket::Tcp_Socket	Tcp_socket.h	/^		Tcp_Socket();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::Tcp_Socket	Tcp_socket.h	/^		Tcp_Socket(int fd);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int fd)
Tcp_Socket::accept_sock	Tcp_socket.cpp	/^int Tcp_Socket::accept_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
Tcp_Socket::accept_sock	Tcp_socket.h	/^		int accept_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
Tcp_Socket::bind_sock	Tcp_socket.cpp	/^int Tcp_Socket::bind_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
Tcp_Socket::bind_sock	Tcp_socket.h	/^		int bind_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
Tcp_Socket::close_sock	Tcp_socket.cpp	/^int Tcp_Socket::close_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::close_sock	Tcp_socket.h	/^		int close_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::connect_sock	Tcp_socket.cpp	/^int Tcp_Socket::connect_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
Tcp_Socket::connect_sock	Tcp_socket.h	/^		int connect_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
Tcp_Socket::get_sock	Tcp_socket.cpp	/^int Tcp_Socket::get_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::get_sock	Tcp_socket.h	/^		int get_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::init_sock	Tcp_socket.cpp	/^int Tcp_Socket::init_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::init_sock	Tcp_socket.h	/^		int init_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::listen_sock	Tcp_socket.cpp	/^int Tcp_Socket::listen_sock(int qs)$/;"	f	language:C++	class:Tcp_Socket	signature:(int qs)
Tcp_Socket::listen_sock	Tcp_socket.h	/^		int listen_sock(int qs);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int qs)
Tcp_Socket::m_fd	Tcp_socket.h	/^		int m_fd;$/;"	m	language:C++	class:Tcp_Socket	access:private
Tcp_Socket::read_nr_sock	Tcp_socket.cpp	/^int Tcp_Socket::read_nr_sock(char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(char *buf, size_t len)
Tcp_Socket::read_nr_sock	Tcp_socket.h	/^		int read_nr_sock(char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(char *buf, size_t len)
Tcp_Socket::read_sock	Tcp_socket.cpp	/^int Tcp_Socket::read_sock(char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(char *buf, size_t len)
Tcp_Socket::read_sock	Tcp_socket.h	/^		int read_sock(char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(char *buf, size_t len)
Tcp_Socket::set_close_on_exec	Tcp_socket.cpp	/^int Tcp_Socket::set_close_on_exec()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::set_close_on_exec	Tcp_socket.h	/^		int set_close_on_exec();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::set_keep_alive	Tcp_socket.cpp	/^int Tcp_Socket::set_keep_alive()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::set_keep_alive	Tcp_socket.h	/^		int set_keep_alive();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::set_nonblock	Tcp_socket.cpp	/^int Tcp_Socket::set_nonblock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::set_nonblock	Tcp_socket.h	/^		int set_nonblock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::set_reuse_addr	Tcp_socket.cpp	/^int Tcp_Socket::set_reuse_addr()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::set_reuse_addr	Tcp_socket.h	/^		int set_reuse_addr();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::set_sock	Tcp_socket.cpp	/^void Tcp_Socket::set_sock(int fd)$/;"	f	language:C++	class:Tcp_Socket	signature:(int fd)
Tcp_Socket::set_sock	Tcp_socket.h	/^		void set_sock(int fd);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int fd)
Tcp_Socket::unset_linger	Tcp_socket.cpp	/^int Tcp_Socket::unset_linger()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::unset_linger	Tcp_socket.h	/^		int unset_linger();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::unset_nagle	Tcp_socket.cpp	/^int Tcp_Socket::unset_nagle()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::unset_nagle	Tcp_socket.h	/^		int unset_nagle();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Tcp_Socket::write_nr_sock	Tcp_socket.cpp	/^int Tcp_Socket::write_nr_sock(const char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(const char *buf, size_t len)
Tcp_Socket::write_nr_sock	Tcp_socket.h	/^		int write_nr_sock(const char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(const char *buf, size_t len)
Tcp_Socket::write_sock	Tcp_socket.cpp	/^int Tcp_Socket::write_sock(const char *buf,size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(const char *buf,size_t len)
Tcp_Socket::write_sock	Tcp_socket.h	/^		int write_sock(const char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(const char *buf, size_t len)
Tcp_Socket::~Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::~Tcp_Socket()$/;"	f	language:C++	class:Tcp_Socket	signature:()
Tcp_Socket::~Tcp_Socket	Tcp_socket.h	/^		~Tcp_Socket();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
Xml_Wrapper	Xml_Wrapper.cpp	/^Xml_Wrapper::Xml_Wrapper()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
Xml_Wrapper	Xml_Wrapper.h	/^	Xml_Wrapper();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
Xml_Wrapper	Xml_Wrapper.h	/^class Xml_Wrapper$/;"	c	language:C++
Xml_Wrapper::Xml_Wrapper	Xml_Wrapper.cpp	/^Xml_Wrapper::Xml_Wrapper()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
Xml_Wrapper::Xml_Wrapper	Xml_Wrapper.h	/^	Xml_Wrapper();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
Xml_Wrapper::add_child_node_by_name	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_child_node_by_name(xmlNode *parent_node, const char *node_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, const char *node_name)
Xml_Wrapper::add_child_node_by_name	Xml_Wrapper.h	/^	xmlNode *add_child_node_by_name(xmlNode *parent_node, const char *node_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, const char *node_name)
Xml_Wrapper::add_child_node_by_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_child_node_by_node(xmlNode *parent_node, xmlNode *cur_node)\/\/recursively copy cur_node, and add to the parent$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, xmlNode *cur_node)
Xml_Wrapper::add_child_node_by_node	Xml_Wrapper.h	/^	xmlNode *add_child_node_by_node(xmlNode *parent_node, xmlNode *cur_node);\/\/recursively copy cur_node, and add to the parent$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, xmlNode *cur_node)
Xml_Wrapper::add_simple_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_simple_child_node(xmlNode *parent_node, const char *node_name, const char *node_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, const char *node_name, const char *node_value)
Xml_Wrapper::add_simple_child_node	Xml_Wrapper.h	/^	xmlNode *add_simple_child_node(xmlNode *parent_node, const char *node_name, const char *node_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, const char *node_name, const char *node_value)
Xml_Wrapper::create_xml	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::create_xml(const char *root_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *root_name)
Xml_Wrapper::create_xml	Xml_Wrapper.h	/^	xmlNode *create_xml(const char *root_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *root_name)
Xml_Wrapper::del_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::del_node_property(xmlNode *cur_node, const char *property_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name)
Xml_Wrapper::del_node_property	Xml_Wrapper.h	/^	int del_node_property(xmlNode *cur_node, const char *property_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name)
Xml_Wrapper::get_all_children_nodes	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_all_children_nodes(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)
Xml_Wrapper::get_all_children_nodes	Xml_Wrapper.h	/^	int get_all_children_nodes(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)
Xml_Wrapper::get_first_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_first_child_node(xmlNode *cur_node)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node)
Xml_Wrapper::get_first_child_node	Xml_Wrapper.h	/^	xmlNode *get_first_child_node(xmlNode *cur_node);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node)
Xml_Wrapper::get_first_node_by_xpath	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_first_node_by_xpath(const char *xpath)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath)
Xml_Wrapper::get_first_node_by_xpath	Xml_Wrapper.h	/^	xmlNode *get_first_node_by_xpath(const char *xpath);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath)
Xml_Wrapper::get_first_node_value_by_xpath	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_first_node_value_by_xpath(const char *xpath, std::string &node_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath, std::string &node_value)
Xml_Wrapper::get_first_node_value_by_xpath	Xml_Wrapper.h	/^	int get_first_node_value_by_xpath(const char *xpath, std::string &node_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath, std::string &node_value)
Xml_Wrapper::get_node_name	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_name(xmlNode *cur_node, std::string &name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &name)
Xml_Wrapper::get_node_name	Xml_Wrapper.h	/^	int get_node_name(xmlNode *cur_node, std::string &name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &name)
Xml_Wrapper::get_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_property(xmlNode *cur_node, const char *property_name, std::string &property_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name, std::string &property_value)
Xml_Wrapper::get_node_property	Xml_Wrapper.h	/^	int get_node_property(xmlNode *cur_node, const char *property_name, std::string &property_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name, std::string &property_value)
Xml_Wrapper::get_node_value	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_value(xmlNode *cur_node, std::string &value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &value)
Xml_Wrapper::get_node_value	Xml_Wrapper.h	/^	int get_node_value(xmlNode *cur_node, std::string &value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &value)
Xml_Wrapper::get_nodes_by_xpath	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_nodes_by_xpath(const char *xpath, std::vector<xmlNode *> &node_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath, std::vector<xmlNode *> &node_vector)
Xml_Wrapper::get_nodes_by_xpath	Xml_Wrapper.h	/^	int get_nodes_by_xpath(const char *xpath, std::vector<xmlNode *> &node_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath, std::vector<xmlNode *> &node_vector)
Xml_Wrapper::get_parent_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_parent_node(xmlNode *cur_node)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node)
Xml_Wrapper::get_parent_node	Xml_Wrapper.h	/^	xmlNode *get_parent_node(xmlNode *cur_node);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node)
Xml_Wrapper::get_root_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_root_node()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
Xml_Wrapper::get_root_node	Xml_Wrapper.h	/^	xmlNode *get_root_node();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
Xml_Wrapper::get_specific_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_specific_child_node(xmlNode *cur_node, const char* node_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* node_name)
Xml_Wrapper::get_specific_child_node	Xml_Wrapper.h	/^	xmlNode *get_specific_child_node(xmlNode *cur_node, const char* node_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* node_name)
Xml_Wrapper::get_specific_children_nodes	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_specific_children_nodes(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)
Xml_Wrapper::get_specific_children_nodes	Xml_Wrapper.h	/^	int get_specific_children_nodes(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)
Xml_Wrapper::load_from_buffer	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::load_from_buffer(const char *xml_buf, unsigned int size)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_buf, unsigned int size)
Xml_Wrapper::load_from_buffer	Xml_Wrapper.h	/^	xmlNode *load_from_buffer(const char *xml_buf, unsigned int size);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_buf, unsigned int size)
Xml_Wrapper::load_from_file	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::load_from_file(const char *xml_file)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_file)
Xml_Wrapper::load_from_file	Xml_Wrapper.h	/^	xmlNode *load_from_file(const char *xml_file);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_file)
Xml_Wrapper::m_doc	Xml_Wrapper.h	/^	xmlDocPtr m_doc;$/;"	m	language:C++	class:Xml_Wrapper	access:private
Xml_Wrapper::save_in_buffer	Xml_Wrapper.cpp	/^int Xml_Wrapper::save_in_buffer(xmlNode *cur_node, std::string &xml_buf)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &xml_buf)
Xml_Wrapper::save_in_buffer	Xml_Wrapper.h	/^	int save_in_buffer(xmlNode *cur_node, std::string &xml_buf);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &xml_buf)
Xml_Wrapper::save_in_file	Xml_Wrapper.cpp	/^int Xml_Wrapper::save_in_file(const char *xml_file)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_file)
Xml_Wrapper::save_in_file	Xml_Wrapper.h	/^	int save_in_file(const char *xml_file);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_file)
Xml_Wrapper::set_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::set_node_property(xmlNode *cur_node, const char *property_name, const char *property_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name, const char *property_value)
Xml_Wrapper::set_node_property	Xml_Wrapper.h	/^	int set_node_property(xmlNode *cur_node, const char *property_name, const char *property_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name, const char *property_value)
Xml_Wrapper::set_node_value	Xml_Wrapper.cpp	/^int Xml_Wrapper::set_node_value(xmlNode *cur_node, const char* value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* value)
Xml_Wrapper::set_node_value	Xml_Wrapper.h	/^	int set_node_value(xmlNode *cur_node, const char* value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* value)
Xml_Wrapper::~Xml_Wrapper	Xml_Wrapper.cpp	/^Xml_Wrapper::~Xml_Wrapper()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
Xml_Wrapper::~Xml_Wrapper	Xml_Wrapper.h	/^	~Xml_Wrapper();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
_PLUGIN_H	Plugin.h	2;"	d	language:C++
_PLUGIN_INTERFACE_H	Plugin_interface.h	2;"	d	language:C++
__HANDLE_ERROR_H__	handle_error.h	2;"	d	language:C++
__SOCK_ADDR_H__	Sock_addr.h	2;"	d	language:C++
__TCP_SOCKET_H__	Tcp_socket.h	2;"	d	language:C++
__XML_WRAPPER_H__	Xml_Wrapper.h	2;"	d	language:C++
accept_sock	Tcp_socket.cpp	/^int Tcp_Socket::accept_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
accept_sock	Tcp_socket.h	/^		int accept_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
add_child_node_by_name	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_child_node_by_name(xmlNode *parent_node, const char *node_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, const char *node_name)
add_child_node_by_name	Xml_Wrapper.h	/^	xmlNode *add_child_node_by_name(xmlNode *parent_node, const char *node_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, const char *node_name)
add_child_node_by_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_child_node_by_node(xmlNode *parent_node, xmlNode *cur_node)\/\/recursively copy cur_node, and add to the parent$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, xmlNode *cur_node)
add_child_node_by_node	Xml_Wrapper.h	/^	xmlNode *add_child_node_by_node(xmlNode *parent_node, xmlNode *cur_node);\/\/recursively copy cur_node, and add to the parent$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, xmlNode *cur_node)
add_simple_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::add_simple_child_node(xmlNode *parent_node, const char *node_name, const char *node_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *parent_node, const char *node_name, const char *node_value)
add_simple_child_node	Xml_Wrapper.h	/^	xmlNode *add_simple_child_node(xmlNode *parent_node, const char *node_name, const char *node_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *parent_node, const char *node_name, const char *node_value)
bind_sock	Tcp_socket.cpp	/^int Tcp_Socket::bind_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
bind_sock	Tcp_socket.h	/^		int bind_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
close_sock	Tcp_socket.cpp	/^int Tcp_Socket::close_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
close_sock	Tcp_socket.h	/^		int close_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
connect_sock	Tcp_socket.cpp	/^int Tcp_Socket::connect_sock(Sock_addr &sa)$/;"	f	language:C++	class:Tcp_Socket	signature:(Sock_addr &sa)
connect_sock	Tcp_socket.h	/^		int connect_sock(Sock_addr &sa);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(Sock_addr &sa)
create_xml	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::create_xml(const char *root_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *root_name)
create_xml	Xml_Wrapper.h	/^	xmlNode *create_xml(const char *root_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *root_name)
del_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::del_node_property(xmlNode *cur_node, const char *property_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name)
del_node_property	Xml_Wrapper.h	/^	int del_node_property(xmlNode *cur_node, const char *property_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name)
dev_log	handle_error.cpp	/^void dev_log(const char *str)$/;"	f	language:C++	signature:(const char *str)
dev_log	handle_error.h	/^extern void dev_log(const char *str);$/;"	p	language:C++	signature:(const char *str)
g_dllConfig	Plugin.cpp	/^std::string g_dllConfig;$/;"	v	language:C++
g_dllNotify	Plugin.cpp	/^std::string g_dllNotify;$/;"	v	language:C++
g_dllPath	Plugin.cpp	/^std::string g_dllPath;$/;"	v	language:C++
g_plugin_interface	Plugin.cpp	/^Plugin_interface g_plugin_interface;$/;"	v	language:C++
g_startPort	Plugin.cpp	/^int g_startPort;$/;"	v	language:C++
get_all_children_nodes	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_all_children_nodes(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)
get_all_children_nodes	Xml_Wrapper.h	/^	int get_all_children_nodes(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::vector<xmlNode *> &children_nodes_vector)
get_first_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_first_child_node(xmlNode *cur_node)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node)
get_first_child_node	Xml_Wrapper.h	/^	xmlNode *get_first_child_node(xmlNode *cur_node);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node)
get_first_node_by_xpath	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_first_node_by_xpath(const char *xpath)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath)
get_first_node_by_xpath	Xml_Wrapper.h	/^	xmlNode *get_first_node_by_xpath(const char *xpath);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath)
get_first_node_value_by_xpath	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_first_node_value_by_xpath(const char *xpath, std::string &node_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath, std::string &node_value)
get_first_node_value_by_xpath	Xml_Wrapper.h	/^	int get_first_node_value_by_xpath(const char *xpath, std::string &node_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath, std::string &node_value)
get_ip	Sock_addr.cpp	/^std::string Sock_addr::get_ip()$/;"	f	language:C++	class:Sock_addr	signature:()
get_ip	Sock_addr.h	/^	std::string get_ip();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
get_node_name	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_name(xmlNode *cur_node, std::string &name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &name)
get_node_name	Xml_Wrapper.h	/^	int get_node_name(xmlNode *cur_node, std::string &name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &name)
get_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_property(xmlNode *cur_node, const char *property_name, std::string &property_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name, std::string &property_value)
get_node_property	Xml_Wrapper.h	/^	int get_node_property(xmlNode *cur_node, const char *property_name, std::string &property_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name, std::string &property_value)
get_node_value	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_node_value(xmlNode *cur_node, std::string &value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &value)
get_node_value	Xml_Wrapper.h	/^	int get_node_value(xmlNode *cur_node, std::string &value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &value)
get_nodes_by_xpath	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_nodes_by_xpath(const char *xpath, std::vector<xmlNode *> &node_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xpath, std::vector<xmlNode *> &node_vector)
get_nodes_by_xpath	Xml_Wrapper.h	/^	int get_nodes_by_xpath(const char *xpath, std::vector<xmlNode *> &node_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xpath, std::vector<xmlNode *> &node_vector)
get_parent_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_parent_node(xmlNode *cur_node)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node)
get_parent_node	Xml_Wrapper.h	/^	xmlNode *get_parent_node(xmlNode *cur_node);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node)
get_port	Sock_addr.cpp	/^int Sock_addr::get_port()$/;"	f	language:C++	class:Sock_addr	signature:()
get_port	Sock_addr.h	/^	int get_port();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
get_root_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_root_node()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
get_root_node	Xml_Wrapper.h	/^	xmlNode *get_root_node();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
get_sock	Tcp_socket.cpp	/^int Tcp_Socket::get_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
get_sock	Tcp_socket.h	/^		int get_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
get_sockaddr_in	Sock_addr.cpp	/^struct sockaddr_in Sock_addr::get_sockaddr_in()$/;"	f	language:C++	class:Sock_addr	signature:()
get_sockaddr_in	Sock_addr.cpp	/^void Sock_addr::get_sockaddr_in(struct sockaddr_in &sin)$/;"	f	language:C++	class:Sock_addr	signature:(struct sockaddr_in &sin)
get_sockaddr_in	Sock_addr.h	/^	struct sockaddr_in get_sockaddr_in();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
get_sockaddr_in	Sock_addr.h	/^	void get_sockaddr_in(struct sockaddr_in &sin);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(struct sockaddr_in &sin)
get_specific_child_node	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::get_specific_child_node(xmlNode *cur_node, const char* node_name)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* node_name)
get_specific_child_node	Xml_Wrapper.h	/^	xmlNode *get_specific_child_node(xmlNode *cur_node, const char* node_name);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* node_name)
get_specific_children_nodes	Xml_Wrapper.cpp	/^int Xml_Wrapper::get_specific_children_nodes(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)
get_specific_children_nodes	Xml_Wrapper.h	/^	int get_specific_children_nodes(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* node_name, std::vector<xmlNode *> &specific_children_nodes_vector)
handle_error	handle_error.cpp	/^void handle_error(const char *str)$/;"	f	language:C++	signature:(const char *str)
handle_error	handle_error.h	/^extern void handle_error(const char *str);$/;"	p	language:C++	signature:(const char *str)
handle_fatal_error	handle_error.cpp	/^void handle_fatal_error(const char *str)$/;"	f	language:C++	signature:(const char *str)
handle_fatal_error	handle_error.h	/^extern void handle_fatal_error(const char *str);$/;"	p	language:C++	signature:(const char *str)
handle_fatal_syscall_error	handle_error.cpp	/^void handle_fatal_syscall_error(const char *str)$/;"	f	language:C++	signature:(const char *str)
handle_fatal_syscall_error	handle_error.h	/^extern void handle_fatal_syscall_error(const char *str);$/;"	p	language:C++	signature:(const char *str)
handle_syscall_error	handle_error.cpp	/^void handle_syscall_error(const char *str)$/;"	f	language:C++	signature:(const char *str)
handle_syscall_error	handle_error.h	/^extern void handle_syscall_error(const char *str);$/;"	p	language:C++	signature:(const char *str)
init_sock	Tcp_socket.cpp	/^int Tcp_Socket::init_sock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
init_sock	Tcp_socket.h	/^		int init_sock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
listen_sock	Tcp_socket.cpp	/^int Tcp_Socket::listen_sock(int qs)$/;"	f	language:C++	class:Tcp_Socket	signature:(int qs)
listen_sock	Tcp_socket.h	/^		int listen_sock(int qs);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int qs)
load_from_buffer	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::load_from_buffer(const char *xml_buf, unsigned int size)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_buf, unsigned int size)
load_from_buffer	Xml_Wrapper.h	/^	xmlNode *load_from_buffer(const char *xml_buf, unsigned int size);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_buf, unsigned int size)
load_from_file	Xml_Wrapper.cpp	/^xmlNode *Xml_Wrapper::load_from_file(const char *xml_file)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_file)
load_from_file	Xml_Wrapper.h	/^	xmlNode *load_from_file(const char *xml_file);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_file)
m_doc	Xml_Wrapper.h	/^	xmlDocPtr m_doc;$/;"	m	language:C++	class:Xml_Wrapper	access:private
m_fd	Tcp_socket.h	/^		int m_fd;$/;"	m	language:C++	class:Tcp_Socket	access:private
m_ip_string	Sock_addr.h	/^	std::string m_ip_string;$/;"	m	language:C++	class:Sock_addr	access:private
m_port	Sock_addr.h	/^	int m_port;$/;"	m	language:C++	class:Sock_addr	access:private
m_sin	Sock_addr.h	/^	struct sockaddr_in m_sin;$/;"	m	language:C++	class:Sock_addr	access:private
m_sock	Plugin_interface.h	/^		Tcp_Socket m_sock;$/;"	m	language:C++	class:Plugin_interface	access:private
notify	Plugin_interface.cpp	/^Plugin_interface::notify()$/;"	f	language:C++	class:Plugin_interface	signature:()
notify	Plugin_interface.h	/^		void notify();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
operator =	Sock_addr.cpp	/^Sock_addr &Sock_addr::operator = (const Sock_addr &sa)$/;"	f	language:C++	class:Sock_addr	signature:(const Sock_addr &sa)
operator =	Sock_addr.h	/^	Sock_addr &operator = (const Sock_addr &sa);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(const Sock_addr &sa)
operator ==	Sock_addr.cpp	/^bool Sock_addr::operator == (const Sock_addr &sa) const$/;"	f	language:C++	class:Sock_addr	signature:(const Sock_addr &sa) const
operator ==	Sock_addr.h	/^	bool operator == (const Sock_addr &sa) const;$/;"	p	language:C++	class:Sock_addr	access:public	signature:(const Sock_addr &sa) const
plugin_notify	Plugin.cpp	/^void plugin_notify(const char *notifyString, int notifyLen)$/;"	f	language:C++	signature:(const char *notifyString, int notifyLen)
plugin_notify	Plugin.h	/^	void plugin_notify(const char *notify, int notifyLen);$/;"	p	language:C++	signature:(const char *notify, int notifyLen)
plugin_start	Plugin.cpp	/^int plugin_start(int startPort, const char *pluginPath, int pathLen, const char *xmlString, int stringLen)$/;"	f	language:C++	signature:(int startPort, const char *pluginPath, int pathLen, const char *xmlString, int stringLen)
plugin_start	Plugin.h	/^	int plugin_start(int startPort, const char *pluginPath, int pathLen, const char *xmlPath, int xmlPathLen);$/;"	p	language:C++	signature:(int startPort, const char *pluginPath, int pathLen, const char *xmlPath, int xmlPathLen)
plugin_stop	Plugin.cpp	/^int plugin_stop()$/;"	f	language:C++	signature:()
plugin_stop	Plugin.h	/^	int plugin_stop();$/;"	p	language:C++	signature:()
read_nr_sock	Tcp_socket.cpp	/^int Tcp_Socket::read_nr_sock(char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(char *buf, size_t len)
read_nr_sock	Tcp_socket.h	/^		int read_nr_sock(char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(char *buf, size_t len)
read_sock	Tcp_socket.cpp	/^int Tcp_Socket::read_sock(char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(char *buf, size_t len)
read_sock	Tcp_socket.h	/^		int read_sock(char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(char *buf, size_t len)
save_in_buffer	Xml_Wrapper.cpp	/^int Xml_Wrapper::save_in_buffer(xmlNode *cur_node, std::string &xml_buf)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, std::string &xml_buf)
save_in_buffer	Xml_Wrapper.h	/^	int save_in_buffer(xmlNode *cur_node, std::string &xml_buf);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, std::string &xml_buf)
save_in_file	Xml_Wrapper.cpp	/^int Xml_Wrapper::save_in_file(const char *xml_file)$/;"	f	language:C++	class:Xml_Wrapper	signature:(const char *xml_file)
save_in_file	Xml_Wrapper.h	/^	int save_in_file(const char *xml_file);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(const char *xml_file)
set	Sock_addr.cpp	/^int Sock_addr::set(std::string ip, int port)$/;"	f	language:C++	class:Sock_addr	signature:(std::string ip, int port)
set	Sock_addr.h	/^	int set(std::string ip, int port = 0);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(std::string ip, int port = 0)
set_by_sockaddr_in	Sock_addr.cpp	/^int Sock_addr::set_by_sockaddr_in(struct sockaddr_in &sin, int socklen)$/;"	f	language:C++	class:Sock_addr	signature:(struct sockaddr_in &sin, int socklen)
set_by_sockaddr_in	Sock_addr.h	/^	int set_by_sockaddr_in(struct sockaddr_in &sin, int socklen);$/;"	p	language:C++	class:Sock_addr	access:public	signature:(struct sockaddr_in &sin, int socklen)
set_close_on_exec	Tcp_socket.cpp	/^int Tcp_Socket::set_close_on_exec()$/;"	f	language:C++	class:Tcp_Socket	signature:()
set_close_on_exec	Tcp_socket.h	/^		int set_close_on_exec();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
set_keep_alive	Tcp_socket.cpp	/^int Tcp_Socket::set_keep_alive()$/;"	f	language:C++	class:Tcp_Socket	signature:()
set_keep_alive	Tcp_socket.h	/^		int set_keep_alive();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
set_node_property	Xml_Wrapper.cpp	/^int Xml_Wrapper::set_node_property(xmlNode *cur_node, const char *property_name, const char *property_value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char *property_name, const char *property_value)
set_node_property	Xml_Wrapper.h	/^	int set_node_property(xmlNode *cur_node, const char *property_name, const char *property_value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char *property_name, const char *property_value)
set_node_value	Xml_Wrapper.cpp	/^int Xml_Wrapper::set_node_value(xmlNode *cur_node, const char* value)$/;"	f	language:C++	class:Xml_Wrapper	signature:(xmlNode *cur_node, const char* value)
set_node_value	Xml_Wrapper.h	/^	int set_node_value(xmlNode *cur_node, const char* value);$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:(xmlNode *cur_node, const char* value)
set_nonblock	Tcp_socket.cpp	/^int Tcp_Socket::set_nonblock()$/;"	f	language:C++	class:Tcp_Socket	signature:()
set_nonblock	Tcp_socket.h	/^		int set_nonblock();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
set_reuse_addr	Tcp_socket.cpp	/^int Tcp_Socket::set_reuse_addr()$/;"	f	language:C++	class:Tcp_Socket	signature:()
set_reuse_addr	Tcp_socket.h	/^		int set_reuse_addr();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
set_sock	Tcp_socket.cpp	/^void Tcp_Socket::set_sock(int fd)$/;"	f	language:C++	class:Tcp_Socket	signature:(int fd)
set_sock	Tcp_socket.h	/^		void set_sock(int fd);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(int fd)
start	Plugin_interface.cpp	/^Plugin_interface::start()$/;"	f	language:C++	class:Plugin_interface	signature:()
start	Plugin_interface.h	/^		void start();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
stop	Plugin_interface.cpp	/^Plugin_interface::stop()$/;"	f	language:C++	class:Plugin_interface	signature:()
stop	Plugin_interface.h	/^		void stop();$/;"	p	language:C++	class:Plugin_interface	access:public	signature:()
unset_linger	Tcp_socket.cpp	/^int Tcp_Socket::unset_linger()$/;"	f	language:C++	class:Tcp_Socket	signature:()
unset_linger	Tcp_socket.h	/^		int unset_linger();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
unset_nagle	Tcp_socket.cpp	/^int Tcp_Socket::unset_nagle()$/;"	f	language:C++	class:Tcp_Socket	signature:()
unset_nagle	Tcp_socket.h	/^		int unset_nagle();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
write_nr_sock	Tcp_socket.cpp	/^int Tcp_Socket::write_nr_sock(const char *buf, size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(const char *buf, size_t len)
write_nr_sock	Tcp_socket.h	/^		int write_nr_sock(const char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(const char *buf, size_t len)
write_sock	Tcp_socket.cpp	/^int Tcp_Socket::write_sock(const char *buf,size_t len)$/;"	f	language:C++	class:Tcp_Socket	signature:(const char *buf,size_t len)
write_sock	Tcp_socket.h	/^		int write_sock(const char *buf, size_t len);$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:(const char *buf, size_t len)
~Sock_addr	Sock_addr.cpp	/^Sock_addr::~Sock_addr()$/;"	f	language:C++	class:Sock_addr	signature:()
~Sock_addr	Sock_addr.h	/^	~Sock_addr();$/;"	p	language:C++	class:Sock_addr	access:public	signature:()
~Tcp_Socket	Tcp_socket.cpp	/^Tcp_Socket::~Tcp_Socket()$/;"	f	language:C++	class:Tcp_Socket	signature:()
~Tcp_Socket	Tcp_socket.h	/^		~Tcp_Socket();$/;"	p	language:C++	class:Tcp_Socket	access:public	signature:()
~Xml_Wrapper	Xml_Wrapper.cpp	/^Xml_Wrapper::~Xml_Wrapper()$/;"	f	language:C++	class:Xml_Wrapper	signature:()
~Xml_Wrapper	Xml_Wrapper.h	/^	~Xml_Wrapper();$/;"	p	language:C++	class:Xml_Wrapper	access:public	signature:()
