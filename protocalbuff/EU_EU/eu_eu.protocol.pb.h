// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eu_eu.protocol.proto

#ifndef PROTOBUF_eu_5feu_2eprotocol_2eproto__INCLUDED
#define PROTOBUF_eu_5feu_2eprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace eu_eu {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();
void protobuf_AssignDesc_eu_5feu_2eprotocol_2eproto();
void protobuf_ShutdownFile_eu_5feu_2eprotocol_2eproto();

class pb_MSG_EU_EU_SHUFFLE;
class pb_MSG_EU_EU_SHUFFLE_Iterm;

// ===================================================================

class pb_MSG_EU_EU_SHUFFLE_Iterm : public ::google::protobuf::Message {
 public:
  pb_MSG_EU_EU_SHUFFLE_Iterm();
  virtual ~pb_MSG_EU_EU_SHUFFLE_Iterm();
  
  pb_MSG_EU_EU_SHUFFLE_Iterm(const pb_MSG_EU_EU_SHUFFLE_Iterm& from);
  
  inline pb_MSG_EU_EU_SHUFFLE_Iterm& operator=(const pb_MSG_EU_EU_SHUFFLE_Iterm& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_EU_EU_SHUFFLE_Iterm& default_instance();
  
  void Swap(pb_MSG_EU_EU_SHUFFLE_Iterm* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_EU_EU_SHUFFLE_Iterm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_EU_EU_SHUFFLE_Iterm& from);
  void MergeFrom(const pb_MSG_EU_EU_SHUFFLE_Iterm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_eu_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_eu_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_EU_EU_SHUFFLE_Iterm* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_EU_EU_SHUFFLE : public ::google::protobuf::Message {
 public:
  pb_MSG_EU_EU_SHUFFLE();
  virtual ~pb_MSG_EU_EU_SHUFFLE();
  
  pb_MSG_EU_EU_SHUFFLE(const pb_MSG_EU_EU_SHUFFLE& from);
  
  inline pb_MSG_EU_EU_SHUFFLE& operator=(const pb_MSG_EU_EU_SHUFFLE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_EU_EU_SHUFFLE& default_instance();
  
  void Swap(pb_MSG_EU_EU_SHUFFLE* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_EU_EU_SHUFFLE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_EU_EU_SHUFFLE& from);
  void MergeFrom(const pb_MSG_EU_EU_SHUFFLE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef pb_MSG_EU_EU_SHUFFLE_Iterm Iterm;
  
  // accessors -------------------------------------------------------
  
  // required string InstanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string DestSplitName = 2;
  inline bool has_destsplitname() const;
  inline void clear_destsplitname();
  static const int kDestSplitNameFieldNumber = 2;
  inline const ::std::string& destsplitname() const;
  inline void set_destsplitname(const ::std::string& value);
  inline void set_destsplitname(const char* value);
  inline void set_destsplitname(const char* value, size_t size);
  inline ::std::string* mutable_destsplitname();
  inline ::std::string* release_destsplitname();
  
  // required int32 DestSplitNumber = 3;
  inline bool has_destsplitnumber() const;
  inline void clear_destsplitnumber();
  static const int kDestSplitNumberFieldNumber = 3;
  inline ::google::protobuf::int32 destsplitnumber() const;
  inline void set_destsplitnumber(::google::protobuf::int32 value);
  
  // repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
  inline int itermlist_size() const;
  inline void clear_itermlist();
  static const int kItermListFieldNumber = 4;
  inline const ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm& itermlist(int index) const;
  inline ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm* mutable_itermlist(int index);
  inline ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm* add_itermlist();
  inline const ::google::protobuf::RepeatedPtrField< ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm >&
      itermlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm >*
      mutable_itermlist();
  
  // @@protoc_insertion_point(class_scope:eu_eu.pb_MSG_EU_EU_SHUFFLE)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_destsplitname();
  inline void clear_has_destsplitname();
  inline void set_has_destsplitnumber();
  inline void clear_has_destsplitnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceid_;
  ::std::string* destsplitname_;
  ::google::protobuf::RepeatedPtrField< ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm > itermlist_;
  ::google::protobuf::int32 destsplitnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_eu_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_eu_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_EU_EU_SHUFFLE* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_MSG_EU_EU_SHUFFLE_Iterm

// required string key = 1;
inline bool pb_MSG_EU_EU_SHUFFLE_Iterm::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& pb_MSG_EU_EU_SHUFFLE_Iterm::key() const {
  return *key_;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE_Iterm::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE_Iterm::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool pb_MSG_EU_EU_SHUFFLE_Iterm::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& pb_MSG_EU_EU_SHUFFLE_Iterm::value() const {
  return *value_;
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE_Iterm::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE_Iterm::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE_Iterm::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// pb_MSG_EU_EU_SHUFFLE

// required string InstanceID = 1;
inline bool pb_MSG_EU_EU_SHUFFLE::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_EU_EU_SHUFFLE::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string DestSplitName = 2;
inline bool pb_MSG_EU_EU_SHUFFLE::has_destsplitname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_has_destsplitname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_has_destsplitname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_destsplitname() {
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    destsplitname_->clear();
  }
  clear_has_destsplitname();
}
inline const ::std::string& pb_MSG_EU_EU_SHUFFLE::destsplitname() const {
  return *destsplitname_;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_destsplitname(const ::std::string& value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE::set_destsplitname(const char* value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_EU_EU_SHUFFLE::set_destsplitname(const char* value, size_t size) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE::mutable_destsplitname() {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  return destsplitname_;
}
inline ::std::string* pb_MSG_EU_EU_SHUFFLE::release_destsplitname() {
  clear_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destsplitname_;
    destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 DestSplitNumber = 3;
inline bool pb_MSG_EU_EU_SHUFFLE::has_destsplitnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_has_destsplitnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_has_destsplitnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_destsplitnumber() {
  destsplitnumber_ = 0;
  clear_has_destsplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_EU_EU_SHUFFLE::destsplitnumber() const {
  return destsplitnumber_;
}
inline void pb_MSG_EU_EU_SHUFFLE::set_destsplitnumber(::google::protobuf::int32 value) {
  set_has_destsplitnumber();
  destsplitnumber_ = value;
}

// repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
inline int pb_MSG_EU_EU_SHUFFLE::itermlist_size() const {
  return itermlist_.size();
}
inline void pb_MSG_EU_EU_SHUFFLE::clear_itermlist() {
  itermlist_.Clear();
}
inline const ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm& pb_MSG_EU_EU_SHUFFLE::itermlist(int index) const {
  return itermlist_.Get(index);
}
inline ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm* pb_MSG_EU_EU_SHUFFLE::mutable_itermlist(int index) {
  return itermlist_.Mutable(index);
}
inline ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm* pb_MSG_EU_EU_SHUFFLE::add_itermlist() {
  return itermlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm >&
pb_MSG_EU_EU_SHUFFLE::itermlist() const {
  return itermlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::eu_eu::pb_MSG_EU_EU_SHUFFLE_Iterm >*
pb_MSG_EU_EU_SHUFFLE::mutable_itermlist() {
  return &itermlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eu_eu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eu_5feu_2eprotocol_2eproto__INCLUDED
