// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eu_eu.protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eu_eu {

namespace {

const ::google::protobuf::Descriptor* pb_MSG_EU_EU_SHUFFLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_EU_EU_SHUFFLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_EU_EU_SHUFFLE_Iterm_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_eu_5feu_2eprotocol_2eproto() {
  protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eu_eu.protocol.proto");
  GOOGLE_CHECK(file != NULL);
  pb_MSG_EU_EU_SHUFFLE_descriptor_ = file->message_type(0);
  static const int pb_MSG_EU_EU_SHUFFLE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, destsplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, destsplitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, itermlist_),
  };
  pb_MSG_EU_EU_SHUFFLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_EU_EU_SHUFFLE_descriptor_,
      pb_MSG_EU_EU_SHUFFLE::default_instance_,
      pb_MSG_EU_EU_SHUFFLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_EU_EU_SHUFFLE));
  pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_ = pb_MSG_EU_EU_SHUFFLE_descriptor_->nested_type(0);
  static const int pb_MSG_EU_EU_SHUFFLE_Iterm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE_Iterm, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE_Iterm, value_),
  };
  pb_MSG_EU_EU_SHUFFLE_Iterm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_,
      pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance_,
      pb_MSG_EU_EU_SHUFFLE_Iterm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE_Iterm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_EU_EU_SHUFFLE_Iterm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_EU_EU_SHUFFLE_Iterm));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eu_5feu_2eprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_EU_EU_SHUFFLE_descriptor_, &pb_MSG_EU_EU_SHUFFLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_, &pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eu_5feu_2eprotocol_2eproto() {
  delete pb_MSG_EU_EU_SHUFFLE::default_instance_;
  delete pb_MSG_EU_EU_SHUFFLE_reflection_;
  delete pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance_;
  delete pb_MSG_EU_EU_SHUFFLE_Iterm_reflection_;
}

void protobuf_AddDesc_eu_5feu_2eprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024eu_eu.protocol.proto\022\005eu_eu\"\265\001\n\024pb_MSG"
    "_EU_EU_SHUFFLE\022\022\n\nInstanceID\030\001 \002(\t\022\025\n\rDe"
    "stSplitName\030\002 \002(\t\022\027\n\017DestSplitNumber\030\003 \002"
    "(\005\0224\n\tItermList\030\004 \003(\0132!.eu_eu.pb_MSG_EU_"
    "EU_SHUFFLE.Iterm\032#\n\005Iterm\022\013\n\003key\030\001 \002(\t\022\r"
    "\n\005value\030\002 \002(\t", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eu_eu.protocol.proto", &protobuf_RegisterTypes);
  pb_MSG_EU_EU_SHUFFLE::default_instance_ = new pb_MSG_EU_EU_SHUFFLE();
  pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance_ = new pb_MSG_EU_EU_SHUFFLE_Iterm();
  pb_MSG_EU_EU_SHUFFLE::default_instance_->InitAsDefaultInstance();
  pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eu_5feu_2eprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eu_5feu_2eprotocol_2eproto {
  StaticDescriptorInitializer_eu_5feu_2eprotocol_2eproto() {
    protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();
  }
} static_descriptor_initializer_eu_5feu_2eprotocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_EU_EU_SHUFFLE_Iterm::kKeyFieldNumber;
const int pb_MSG_EU_EU_SHUFFLE_Iterm::kValueFieldNumber;
#endif  // !_MSC_VER

pb_MSG_EU_EU_SHUFFLE_Iterm::pb_MSG_EU_EU_SHUFFLE_Iterm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::InitAsDefaultInstance() {
}

pb_MSG_EU_EU_SHUFFLE_Iterm::pb_MSG_EU_EU_SHUFFLE_Iterm(const pb_MSG_EU_EU_SHUFFLE_Iterm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_EU_EU_SHUFFLE_Iterm::~pb_MSG_EU_EU_SHUFFLE_Iterm() {
  SharedDtor();
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_EU_EU_SHUFFLE_Iterm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_;
}

const pb_MSG_EU_EU_SHUFFLE_Iterm& pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_EU_EU_SHUFFLE_Iterm* pb_MSG_EU_EU_SHUFFLE_Iterm::default_instance_ = NULL;

pb_MSG_EU_EU_SHUFFLE_Iterm* pb_MSG_EU_EU_SHUFFLE_Iterm::New() const {
  return new pb_MSG_EU_EU_SHUFFLE_Iterm;
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_EU_EU_SHUFFLE_Iterm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_EU_EU_SHUFFLE_Iterm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_EU_EU_SHUFFLE_Iterm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_EU_EU_SHUFFLE_Iterm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_EU_EU_SHUFFLE_Iterm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::MergeFrom(const pb_MSG_EU_EU_SHUFFLE_Iterm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::CopyFrom(const pb_MSG_EU_EU_SHUFFLE_Iterm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_EU_EU_SHUFFLE_Iterm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_EU_EU_SHUFFLE_Iterm::Swap(pb_MSG_EU_EU_SHUFFLE_Iterm* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_EU_EU_SHUFFLE_Iterm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_EU_EU_SHUFFLE_Iterm_descriptor_;
  metadata.reflection = pb_MSG_EU_EU_SHUFFLE_Iterm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_EU_EU_SHUFFLE::kInstanceIDFieldNumber;
const int pb_MSG_EU_EU_SHUFFLE::kDestSplitNameFieldNumber;
const int pb_MSG_EU_EU_SHUFFLE::kDestSplitNumberFieldNumber;
const int pb_MSG_EU_EU_SHUFFLE::kItermListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_EU_EU_SHUFFLE::pb_MSG_EU_EU_SHUFFLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_EU_EU_SHUFFLE::InitAsDefaultInstance() {
}

pb_MSG_EU_EU_SHUFFLE::pb_MSG_EU_EU_SHUFFLE(const pb_MSG_EU_EU_SHUFFLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_EU_EU_SHUFFLE::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destsplitnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_EU_EU_SHUFFLE::~pb_MSG_EU_EU_SHUFFLE() {
  SharedDtor();
}

void pb_MSG_EU_EU_SHUFFLE::SharedDtor() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete destsplitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_EU_EU_SHUFFLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_EU_EU_SHUFFLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_EU_EU_SHUFFLE_descriptor_;
}

const pb_MSG_EU_EU_SHUFFLE& pb_MSG_EU_EU_SHUFFLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eu_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_EU_EU_SHUFFLE* pb_MSG_EU_EU_SHUFFLE::default_instance_ = NULL;

pb_MSG_EU_EU_SHUFFLE* pb_MSG_EU_EU_SHUFFLE::New() const {
  return new pb_MSG_EU_EU_SHUFFLE;
}

void pb_MSG_EU_EU_SHUFFLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_destsplitname()) {
      if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
        destsplitname_->clear();
      }
    }
    destsplitnumber_ = 0;
  }
  itermlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_EU_EU_SHUFFLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DestSplitName;
        break;
      }
      
      // required string DestSplitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destsplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destsplitname().data(), this->destsplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DestSplitNumber;
        break;
      }
      
      // required int32 DestSplitNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destsplitnumber_)));
          set_has_destsplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ItermList;
        break;
      }
      
      // repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItermList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itermlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ItermList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_EU_EU_SHUFFLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceid(), output);
  }
  
  // required string DestSplitName = 2;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->destsplitname(), output);
  }
  
  // required int32 DestSplitNumber = 3;
  if (has_destsplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destsplitnumber(), output);
  }
  
  // repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
  for (int i = 0; i < this->itermlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itermlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_EU_EU_SHUFFLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceid(), target);
  }
  
  // required string DestSplitName = 2;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destsplitname(), target);
  }
  
  // required int32 DestSplitNumber = 3;
  if (has_destsplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->destsplitnumber(), target);
  }
  
  // repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
  for (int i = 0; i < this->itermlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itermlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_EU_EU_SHUFFLE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string DestSplitName = 2;
    if (has_destsplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destsplitname());
    }
    
    // required int32 DestSplitNumber = 3;
    if (has_destsplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destsplitnumber());
    }
    
  }
  // repeated .eu_eu.pb_MSG_EU_EU_SHUFFLE.Iterm ItermList = 4;
  total_size += 1 * this->itermlist_size();
  for (int i = 0; i < this->itermlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itermlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_EU_EU_SHUFFLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_EU_EU_SHUFFLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_EU_EU_SHUFFLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_EU_EU_SHUFFLE::MergeFrom(const pb_MSG_EU_EU_SHUFFLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  itermlist_.MergeFrom(from.itermlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_destsplitname()) {
      set_destsplitname(from.destsplitname());
    }
    if (from.has_destsplitnumber()) {
      set_destsplitnumber(from.destsplitnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_EU_EU_SHUFFLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_EU_EU_SHUFFLE::CopyFrom(const pb_MSG_EU_EU_SHUFFLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_EU_EU_SHUFFLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < itermlist_size(); i++) {
    if (!this->itermlist(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_EU_EU_SHUFFLE::Swap(pb_MSG_EU_EU_SHUFFLE* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(destsplitname_, other->destsplitname_);
    std::swap(destsplitnumber_, other->destsplitnumber_);
    itermlist_.Swap(&other->itermlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_EU_EU_SHUFFLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_EU_EU_SHUFFLE_descriptor_;
  metadata.reflection = pb_MSG_EU_EU_SHUFFLE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eu_eu

// @@protoc_insertion_point(global_scope)
