// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bc_eu.protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bc_eu {

namespace {

const ::google::protobuf::Descriptor* pb_MSG_BC_EU_INIT_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_INIT_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_MAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_MAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_SHUFFLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_SHUFFLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_SHUFFLE_IP_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_REDUCE_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_REDUCE_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_REDUCE_ACK_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_DELETE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_MSG_BC_EU_DELETE_DATA_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto() {
  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bc_eu.protocol.proto");
  GOOGLE_CHECK(file != NULL);
  pb_MSG_BC_EU_INIT_DATA_descriptor_ = file->message_type(0);
  static const int pb_MSG_BC_EU_INIT_DATA_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, splitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, splitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, starline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, endline_),
  };
  pb_MSG_BC_EU_INIT_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_INIT_DATA_descriptor_,
      pb_MSG_BC_EU_INIT_DATA::default_instance_,
      pb_MSG_BC_EU_INIT_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_INIT_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_INIT_DATA));
  pb_MSG_BC_EU_MAP_descriptor_ = file->message_type(1);
  static const int pb_MSG_BC_EU_MAP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, sourcesplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, sourcesplitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, destsplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, destsplitnumber_),
  };
  pb_MSG_BC_EU_MAP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_MAP_descriptor_,
      pb_MSG_BC_EU_MAP::default_instance_,
      pb_MSG_BC_EU_MAP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_MAP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_MAP));
  pb_MSG_BC_EU_SHUFFLE_descriptor_ = file->message_type(2);
  static const int pb_MSG_BC_EU_SHUFFLE_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, sourcesplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, sourcesplitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, destsplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, destsplitnummber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, mo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, ip_info_list_),
  };
  pb_MSG_BC_EU_SHUFFLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_SHUFFLE_descriptor_,
      pb_MSG_BC_EU_SHUFFLE::default_instance_,
      pb_MSG_BC_EU_SHUFFLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_SHUFFLE));
  pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_ = pb_MSG_BC_EU_SHUFFLE_descriptor_->nested_type(0);
  static const int pb_MSG_BC_EU_SHUFFLE_IP_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE_IP_info, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE_IP_info, ip_),
  };
  pb_MSG_BC_EU_SHUFFLE_IP_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_,
      pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance_,
      pb_MSG_BC_EU_SHUFFLE_IP_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE_IP_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_SHUFFLE_IP_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_SHUFFLE_IP_info));
  pb_MSG_BC_EU_REDUCE_descriptor_ = file->message_type(3);
  static const int pb_MSG_BC_EU_REDUCE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE, sourcesplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE, sourcesplitnumber_),
  };
  pb_MSG_BC_EU_REDUCE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_REDUCE_descriptor_,
      pb_MSG_BC_EU_REDUCE::default_instance_,
      pb_MSG_BC_EU_REDUCE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_REDUCE));
  pb_MSG_BC_EU_REDUCE_ACK_descriptor_ = file->message_type(4);
  static const int pb_MSG_BC_EU_REDUCE_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK, result_list_),
  };
  pb_MSG_BC_EU_REDUCE_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_REDUCE_ACK_descriptor_,
      pb_MSG_BC_EU_REDUCE_ACK::default_instance_,
      pb_MSG_BC_EU_REDUCE_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_REDUCE_ACK));
  pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_ = pb_MSG_BC_EU_REDUCE_ACK_descriptor_->nested_type(0);
  static const int pb_MSG_BC_EU_REDUCE_ACK_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK_result, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK_result, value_),
  };
  pb_MSG_BC_EU_REDUCE_ACK_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_,
      pb_MSG_BC_EU_REDUCE_ACK_result::default_instance_,
      pb_MSG_BC_EU_REDUCE_ACK_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_REDUCE_ACK_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_REDUCE_ACK_result));
  pb_MSG_BC_EU_DELETE_DATA_descriptor_ = file->message_type(5);
  static const int pb_MSG_BC_EU_DELETE_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_DELETE_DATA, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_DELETE_DATA, sourcesplitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_DELETE_DATA, sourcesplitnumber_),
  };
  pb_MSG_BC_EU_DELETE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_MSG_BC_EU_DELETE_DATA_descriptor_,
      pb_MSG_BC_EU_DELETE_DATA::default_instance_,
      pb_MSG_BC_EU_DELETE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_DELETE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_MSG_BC_EU_DELETE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_MSG_BC_EU_DELETE_DATA));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_INIT_DATA_descriptor_, &pb_MSG_BC_EU_INIT_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_MAP_descriptor_, &pb_MSG_BC_EU_MAP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_SHUFFLE_descriptor_, &pb_MSG_BC_EU_SHUFFLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_, &pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_REDUCE_descriptor_, &pb_MSG_BC_EU_REDUCE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_REDUCE_ACK_descriptor_, &pb_MSG_BC_EU_REDUCE_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_, &pb_MSG_BC_EU_REDUCE_ACK_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_MSG_BC_EU_DELETE_DATA_descriptor_, &pb_MSG_BC_EU_DELETE_DATA::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto() {
  delete pb_MSG_BC_EU_INIT_DATA::default_instance_;
  delete pb_MSG_BC_EU_INIT_DATA_reflection_;
  delete pb_MSG_BC_EU_MAP::default_instance_;
  delete pb_MSG_BC_EU_MAP_reflection_;
  delete pb_MSG_BC_EU_SHUFFLE::default_instance_;
  delete pb_MSG_BC_EU_SHUFFLE_reflection_;
  delete pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance_;
  delete pb_MSG_BC_EU_SHUFFLE_IP_info_reflection_;
  delete pb_MSG_BC_EU_REDUCE::default_instance_;
  delete pb_MSG_BC_EU_REDUCE_reflection_;
  delete pb_MSG_BC_EU_REDUCE_ACK::default_instance_;
  delete pb_MSG_BC_EU_REDUCE_ACK_reflection_;
  delete pb_MSG_BC_EU_REDUCE_ACK_result::default_instance_;
  delete pb_MSG_BC_EU_REDUCE_ACK_result_reflection_;
  delete pb_MSG_BC_EU_DELETE_DATA::default_instance_;
  delete pb_MSG_BC_EU_DELETE_DATA_reflection_;
}

void protobuf_AddDesc_bc_5feu_2eprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024bc_eu.protocol.proto\022\005bc_eu\"\205\001\n\026pb_MSG"
    "_BC_EU_INIT_DATA\022\022\n\nInstanceID\030\001 \002(\t\022\014\n\004"
    "Path\030\002 \002(\t\022\021\n\tSplitName\030\003 \002(\t\022\023\n\013SplitNu"
    "mber\030\004 \002(\005\022\020\n\010StarLine\030\005 \002(\005\022\017\n\007EndLine\030"
    "\006 \002(\005\"\245\001\n\020pb_MSG_BC_EU_MAP\022\013\n\003Cmd\030\001 \002(\t\022"
    "\014\n\004Para\030\002 \003(\t\022\022\n\nInstanceID\030\003 \002(\t\022\027\n\017Sou"
    "rceSplitName\030\004 \002(\t\022\031\n\021SourceSplitNumber\030"
    "\005 \002(\005\022\025\n\rDestSplitName\030\006 \002(\t\022\027\n\017DestSpli"
    "tNumber\030\007 \002(\005\"\372\001\n\024pb_MSG_BC_EU_SHUFFLE\022\022"
    "\n\nInstanceID\030\001 \002(\t\022\027\n\017SourceSplitName\030\002 "
    "\002(\t\022\031\n\021SourceSplitNumber\030\003 \002(\005\022\025\n\rDestSp"
    "litName\030\004 \002(\t\022\030\n\020DestSplitNummber\030\005 \002(\005\022"
    "\n\n\002MO\030\006 \002(\005\0229\n\014IP_info_List\030\007 \003(\0132#.bc_e"
    "u.pb_MSG_BC_EU_SHUFFLE.IP_info\032\"\n\007IP_inf"
    "o\022\013\n\003key\030\001 \002(\005\022\n\n\002IP\030\002 \002(\t\"]\n\023pb_MSG_BC_"
    "EU_REDUCE\022\022\n\nInstanceID\030\001 \002(\t\022\027\n\017SourceS"
    "plitName\030\002 \002(\t\022\031\n\021SourcesplitNumber\030\003 \002("
    "\005\"{\n\027pb_MSG_BC_EU_REDUCE_ACK\022:\n\013result_l"
    "ist\030\001 \003(\0132%.bc_eu.pb_MSG_BC_EU_REDUCE_AC"
    "K.result\032$\n\006result\022\013\n\003key\030\001 \002(\t\022\r\n\005value"
    "\030\002 \002(\t\"b\n\030pb_MSG_BC_EU_DELETE_DATA\022\022\n\nIn"
    "stanceID\030\001 \002(\t\022\027\n\017SourceSplitName\030\002 \002(\t\022"
    "\031\n\021SourceSplitNumber\030\003 \002(\005", 906);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bc_eu.protocol.proto", &protobuf_RegisterTypes);
  pb_MSG_BC_EU_INIT_DATA::default_instance_ = new pb_MSG_BC_EU_INIT_DATA();
  pb_MSG_BC_EU_MAP::default_instance_ = new pb_MSG_BC_EU_MAP();
  pb_MSG_BC_EU_SHUFFLE::default_instance_ = new pb_MSG_BC_EU_SHUFFLE();
  pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance_ = new pb_MSG_BC_EU_SHUFFLE_IP_info();
  pb_MSG_BC_EU_REDUCE::default_instance_ = new pb_MSG_BC_EU_REDUCE();
  pb_MSG_BC_EU_REDUCE_ACK::default_instance_ = new pb_MSG_BC_EU_REDUCE_ACK();
  pb_MSG_BC_EU_REDUCE_ACK_result::default_instance_ = new pb_MSG_BC_EU_REDUCE_ACK_result();
  pb_MSG_BC_EU_DELETE_DATA::default_instance_ = new pb_MSG_BC_EU_DELETE_DATA();
  pb_MSG_BC_EU_INIT_DATA::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_MAP::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_SHUFFLE::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_REDUCE::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_REDUCE_ACK::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_REDUCE_ACK_result::default_instance_->InitAsDefaultInstance();
  pb_MSG_BC_EU_DELETE_DATA::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bc_5feu_2eprotocol_2eproto {
  StaticDescriptorInitializer_bc_5feu_2eprotocol_2eproto() {
    protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  }
} static_descriptor_initializer_bc_5feu_2eprotocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_INIT_DATA::kInstanceIDFieldNumber;
const int pb_MSG_BC_EU_INIT_DATA::kPathFieldNumber;
const int pb_MSG_BC_EU_INIT_DATA::kSplitNameFieldNumber;
const int pb_MSG_BC_EU_INIT_DATA::kSplitNumberFieldNumber;
const int pb_MSG_BC_EU_INIT_DATA::kStarLineFieldNumber;
const int pb_MSG_BC_EU_INIT_DATA::kEndLineFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_INIT_DATA::pb_MSG_BC_EU_INIT_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_INIT_DATA::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_INIT_DATA::pb_MSG_BC_EU_INIT_DATA(const pb_MSG_BC_EU_INIT_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_INIT_DATA::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splitnumber_ = 0;
  starline_ = 0;
  endline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_INIT_DATA::~pb_MSG_BC_EU_INIT_DATA() {
  SharedDtor();
}

void pb_MSG_BC_EU_INIT_DATA::SharedDtor() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (splitname_ != &::google::protobuf::internal::kEmptyString) {
    delete splitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_INIT_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_INIT_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_INIT_DATA_descriptor_;
}

const pb_MSG_BC_EU_INIT_DATA& pb_MSG_BC_EU_INIT_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_INIT_DATA* pb_MSG_BC_EU_INIT_DATA::default_instance_ = NULL;

pb_MSG_BC_EU_INIT_DATA* pb_MSG_BC_EU_INIT_DATA::New() const {
  return new pb_MSG_BC_EU_INIT_DATA;
}

void pb_MSG_BC_EU_INIT_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_splitname()) {
      if (splitname_ != &::google::protobuf::internal::kEmptyString) {
        splitname_->clear();
      }
    }
    splitnumber_ = 0;
    starline_ = 0;
    endline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_INIT_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Path;
        break;
      }
      
      // required string Path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SplitName;
        break;
      }
      
      // required string SplitName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_splitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->splitname().data(), this->splitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SplitNumber;
        break;
      }
      
      // required int32 SplitNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splitnumber_)));
          set_has_splitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_StarLine;
        break;
      }
      
      // required int32 StarLine = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StarLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starline_)));
          set_has_starline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_EndLine;
        break;
      }
      
      // required int32 EndLine = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endline_)));
          set_has_endline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_INIT_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceid(), output);
  }
  
  // required string Path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  // required string SplitName = 3;
  if (has_splitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splitname().data(), this->splitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->splitname(), output);
  }
  
  // required int32 SplitNumber = 4;
  if (has_splitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->splitnumber(), output);
  }
  
  // required int32 StarLine = 5;
  if (has_starline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starline(), output);
  }
  
  // required int32 EndLine = 6;
  if (has_endline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->endline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_INIT_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceid(), target);
  }
  
  // required string Path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  // required string SplitName = 3;
  if (has_splitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splitname().data(), this->splitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->splitname(), target);
  }
  
  // required int32 SplitNumber = 4;
  if (has_splitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->splitnumber(), target);
  }
  
  // required int32 StarLine = 5;
  if (has_starline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starline(), target);
  }
  
  // required int32 EndLine = 6;
  if (has_endline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->endline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_INIT_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string Path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required string SplitName = 3;
    if (has_splitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->splitname());
    }
    
    // required int32 SplitNumber = 4;
    if (has_splitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->splitnumber());
    }
    
    // required int32 StarLine = 5;
    if (has_starline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starline());
    }
    
    // required int32 EndLine = 6;
    if (has_endline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_INIT_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_INIT_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_INIT_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_INIT_DATA::MergeFrom(const pb_MSG_BC_EU_INIT_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_splitname()) {
      set_splitname(from.splitname());
    }
    if (from.has_splitnumber()) {
      set_splitnumber(from.splitnumber());
    }
    if (from.has_starline()) {
      set_starline(from.starline());
    }
    if (from.has_endline()) {
      set_endline(from.endline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_INIT_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_INIT_DATA::CopyFrom(const pb_MSG_BC_EU_INIT_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_INIT_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void pb_MSG_BC_EU_INIT_DATA::Swap(pb_MSG_BC_EU_INIT_DATA* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(path_, other->path_);
    std::swap(splitname_, other->splitname_);
    std::swap(splitnumber_, other->splitnumber_);
    std::swap(starline_, other->starline_);
    std::swap(endline_, other->endline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_INIT_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_INIT_DATA_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_INIT_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_MAP::kCmdFieldNumber;
const int pb_MSG_BC_EU_MAP::kParaFieldNumber;
const int pb_MSG_BC_EU_MAP::kInstanceIDFieldNumber;
const int pb_MSG_BC_EU_MAP::kSourceSplitNameFieldNumber;
const int pb_MSG_BC_EU_MAP::kSourceSplitNumberFieldNumber;
const int pb_MSG_BC_EU_MAP::kDestSplitNameFieldNumber;
const int pb_MSG_BC_EU_MAP::kDestSplitNumberFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_MAP::pb_MSG_BC_EU_MAP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_MAP::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_MAP::pb_MSG_BC_EU_MAP(const pb_MSG_BC_EU_MAP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_MAP::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitnumber_ = 0;
  destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destsplitnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_MAP::~pb_MSG_BC_EU_MAP() {
  SharedDtor();
}

void pb_MSG_BC_EU_MAP::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcesplitname_;
  }
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete destsplitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_MAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_MAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_MAP_descriptor_;
}

const pb_MSG_BC_EU_MAP& pb_MSG_BC_EU_MAP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_MAP* pb_MSG_BC_EU_MAP::default_instance_ = NULL;

pb_MSG_BC_EU_MAP* pb_MSG_BC_EU_MAP::New() const {
  return new pb_MSG_BC_EU_MAP;
}

void pb_MSG_BC_EU_MAP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_sourcesplitname()) {
      if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
        sourcesplitname_->clear();
      }
    }
    sourcesplitnumber_ = 0;
    if (has_destsplitname()) {
      if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
        destsplitname_->clear();
      }
    }
    destsplitnumber_ = 0;
  }
  para_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_MAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Para;
        break;
      }
      
      // repeated string Para = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para(0).data(), this->para(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Para;
        if (input->ExpectTag(26)) goto parse_InstanceID;
        break;
      }
      
      // required string InstanceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstanceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SourceSplitName;
        break;
      }
      
      // required string SourceSplitName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SourceSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcesplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcesplitname().data(), this->sourcesplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SourceSplitNumber;
        break;
      }
      
      // required int32 SourceSplitNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourceSplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcesplitnumber_)));
          set_has_sourcesplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DestSplitName;
        break;
      }
      
      // required string DestSplitName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destsplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destsplitname().data(), this->destsplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DestSplitNumber;
        break;
      }
      
      // required int32 DestSplitNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destsplitnumber_)));
          set_has_destsplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_MAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  // repeated string Para = 2;
  for (int i = 0; i < this->para_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->para(i).data(), this->para(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->para(i), output);
  }
  
  // required string InstanceID = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instanceid(), output);
  }
  
  // required string SourceSplitName = 4;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sourcesplitname(), output);
  }
  
  // required int32 SourceSplitNumber = 5;
  if (has_sourcesplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sourcesplitnumber(), output);
  }
  
  // required string DestSplitName = 6;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->destsplitname(), output);
  }
  
  // required int32 DestSplitNumber = 7;
  if (has_destsplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->destsplitnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_MAP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  // repeated string Para = 2;
  for (int i = 0; i < this->para_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para(i).data(), this->para(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->para(i), target);
  }
  
  // required string InstanceID = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instanceid(), target);
  }
  
  // required string SourceSplitName = 4;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sourcesplitname(), target);
  }
  
  // required int32 SourceSplitNumber = 5;
  if (has_sourcesplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sourcesplitnumber(), target);
  }
  
  // required string DestSplitName = 6;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->destsplitname(), target);
  }
  
  // required int32 DestSplitNumber = 7;
  if (has_destsplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->destsplitnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_MAP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
    // required string InstanceID = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string SourceSplitName = 4;
    if (has_sourcesplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcesplitname());
    }
    
    // required int32 SourceSplitNumber = 5;
    if (has_sourcesplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcesplitnumber());
    }
    
    // required string DestSplitName = 6;
    if (has_destsplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destsplitname());
    }
    
    // required int32 DestSplitNumber = 7;
    if (has_destsplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destsplitnumber());
    }
    
  }
  // repeated string Para = 2;
  total_size += 1 * this->para_size();
  for (int i = 0; i < this->para_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->para(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_MAP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_MAP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_MAP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_MAP::MergeFrom(const pb_MSG_BC_EU_MAP& from) {
  GOOGLE_CHECK_NE(&from, this);
  para_.MergeFrom(from.para_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_sourcesplitname()) {
      set_sourcesplitname(from.sourcesplitname());
    }
    if (from.has_sourcesplitnumber()) {
      set_sourcesplitnumber(from.sourcesplitnumber());
    }
    if (from.has_destsplitname()) {
      set_destsplitname(from.destsplitname());
    }
    if (from.has_destsplitnumber()) {
      set_destsplitnumber(from.destsplitnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_MAP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_MAP::CopyFrom(const pb_MSG_BC_EU_MAP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_MAP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  
  return true;
}

void pb_MSG_BC_EU_MAP::Swap(pb_MSG_BC_EU_MAP* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    para_.Swap(&other->para_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(sourcesplitname_, other->sourcesplitname_);
    std::swap(sourcesplitnumber_, other->sourcesplitnumber_);
    std::swap(destsplitname_, other->destsplitname_);
    std::swap(destsplitnumber_, other->destsplitnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_MAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_MAP_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_MAP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_SHUFFLE_IP_info::kKeyFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE_IP_info::kIPFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_SHUFFLE_IP_info::pb_MSG_BC_EU_SHUFFLE_IP_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_SHUFFLE_IP_info::pb_MSG_BC_EU_SHUFFLE_IP_info(const pb_MSG_BC_EU_SHUFFLE_IP_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_SHUFFLE_IP_info::~pb_MSG_BC_EU_SHUFFLE_IP_info() {
  SharedDtor();
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_SHUFFLE_IP_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_;
}

const pb_MSG_BC_EU_SHUFFLE_IP_info& pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_SHUFFLE_IP_info* pb_MSG_BC_EU_SHUFFLE_IP_info::default_instance_ = NULL;

pb_MSG_BC_EU_SHUFFLE_IP_info* pb_MSG_BC_EU_SHUFFLE_IP_info::New() const {
  return new pb_MSG_BC_EU_SHUFFLE_IP_info;
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_SHUFFLE_IP_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }
      
      // required string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_SHUFFLE_IP_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_SHUFFLE_IP_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_SHUFFLE_IP_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_SHUFFLE_IP_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::MergeFrom(const pb_MSG_BC_EU_SHUFFLE_IP_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::CopyFrom(const pb_MSG_BC_EU_SHUFFLE_IP_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_SHUFFLE_IP_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_BC_EU_SHUFFLE_IP_info::Swap(pb_MSG_BC_EU_SHUFFLE_IP_info* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_SHUFFLE_IP_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_SHUFFLE_IP_info_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_SHUFFLE_IP_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_BC_EU_SHUFFLE::kInstanceIDFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kSourceSplitNameFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kSourceSplitNumberFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kDestSplitNameFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kDestSplitNummberFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kMOFieldNumber;
const int pb_MSG_BC_EU_SHUFFLE::kIPInfoListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_SHUFFLE::pb_MSG_BC_EU_SHUFFLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_SHUFFLE::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_SHUFFLE::pb_MSG_BC_EU_SHUFFLE(const pb_MSG_BC_EU_SHUFFLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_SHUFFLE::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitnumber_ = 0;
  destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destsplitnummber_ = 0;
  mo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_SHUFFLE::~pb_MSG_BC_EU_SHUFFLE() {
  SharedDtor();
}

void pb_MSG_BC_EU_SHUFFLE::SharedDtor() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcesplitname_;
  }
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete destsplitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_SHUFFLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_SHUFFLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_SHUFFLE_descriptor_;
}

const pb_MSG_BC_EU_SHUFFLE& pb_MSG_BC_EU_SHUFFLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_SHUFFLE* pb_MSG_BC_EU_SHUFFLE::default_instance_ = NULL;

pb_MSG_BC_EU_SHUFFLE* pb_MSG_BC_EU_SHUFFLE::New() const {
  return new pb_MSG_BC_EU_SHUFFLE;
}

void pb_MSG_BC_EU_SHUFFLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_sourcesplitname()) {
      if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
        sourcesplitname_->clear();
      }
    }
    sourcesplitnumber_ = 0;
    if (has_destsplitname()) {
      if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
        destsplitname_->clear();
      }
    }
    destsplitnummber_ = 0;
    mo_ = 0;
  }
  ip_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_SHUFFLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SourceSplitName;
        break;
      }
      
      // required string SourceSplitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SourceSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcesplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcesplitname().data(), this->sourcesplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SourceSplitNumber;
        break;
      }
      
      // required int32 SourceSplitNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourceSplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcesplitnumber_)));
          set_has_sourcesplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DestSplitName;
        break;
      }
      
      // required string DestSplitName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destsplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destsplitname().data(), this->destsplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DestSplitNummber;
        break;
      }
      
      // required int32 DestSplitNummber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestSplitNummber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destsplitnummber_)));
          set_has_destsplitnummber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MO;
        break;
      }
      
      // required int32 MO = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mo_)));
          set_has_mo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_IP_info_List;
        break;
      }
      
      // repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP_info_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_IP_info_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_SHUFFLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceid(), output);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sourcesplitname(), output);
  }
  
  // required int32 SourceSplitNumber = 3;
  if (has_sourcesplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sourcesplitnumber(), output);
  }
  
  // required string DestSplitName = 4;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->destsplitname(), output);
  }
  
  // required int32 DestSplitNummber = 5;
  if (has_destsplitnummber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->destsplitnummber(), output);
  }
  
  // required int32 MO = 6;
  if (has_mo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mo(), output);
  }
  
  // repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
  for (int i = 0; i < this->ip_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ip_info_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_SHUFFLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceid(), target);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourcesplitname(), target);
  }
  
  // required int32 SourceSplitNumber = 3;
  if (has_sourcesplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sourcesplitnumber(), target);
  }
  
  // required string DestSplitName = 4;
  if (has_destsplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destsplitname().data(), this->destsplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destsplitname(), target);
  }
  
  // required int32 DestSplitNummber = 5;
  if (has_destsplitnummber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->destsplitnummber(), target);
  }
  
  // required int32 MO = 6;
  if (has_mo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mo(), target);
  }
  
  // repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
  for (int i = 0; i < this->ip_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ip_info_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_SHUFFLE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string SourceSplitName = 2;
    if (has_sourcesplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcesplitname());
    }
    
    // required int32 SourceSplitNumber = 3;
    if (has_sourcesplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcesplitnumber());
    }
    
    // required string DestSplitName = 4;
    if (has_destsplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destsplitname());
    }
    
    // required int32 DestSplitNummber = 5;
    if (has_destsplitnummber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destsplitnummber());
    }
    
    // required int32 MO = 6;
    if (has_mo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mo());
    }
    
  }
  // repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
  total_size += 1 * this->ip_info_list_size();
  for (int i = 0; i < this->ip_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ip_info_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_SHUFFLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_SHUFFLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_SHUFFLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_SHUFFLE::MergeFrom(const pb_MSG_BC_EU_SHUFFLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_info_list_.MergeFrom(from.ip_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_sourcesplitname()) {
      set_sourcesplitname(from.sourcesplitname());
    }
    if (from.has_sourcesplitnumber()) {
      set_sourcesplitnumber(from.sourcesplitnumber());
    }
    if (from.has_destsplitname()) {
      set_destsplitname(from.destsplitname());
    }
    if (from.has_destsplitnummber()) {
      set_destsplitnummber(from.destsplitnummber());
    }
    if (from.has_mo()) {
      set_mo(from.mo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_SHUFFLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_SHUFFLE::CopyFrom(const pb_MSG_BC_EU_SHUFFLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_SHUFFLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < ip_info_list_size(); i++) {
    if (!this->ip_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_BC_EU_SHUFFLE::Swap(pb_MSG_BC_EU_SHUFFLE* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(sourcesplitname_, other->sourcesplitname_);
    std::swap(sourcesplitnumber_, other->sourcesplitnumber_);
    std::swap(destsplitname_, other->destsplitname_);
    std::swap(destsplitnummber_, other->destsplitnummber_);
    std::swap(mo_, other->mo_);
    ip_info_list_.Swap(&other->ip_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_SHUFFLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_SHUFFLE_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_SHUFFLE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_REDUCE::kInstanceIDFieldNumber;
const int pb_MSG_BC_EU_REDUCE::kSourceSplitNameFieldNumber;
const int pb_MSG_BC_EU_REDUCE::kSourcesplitNumberFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_REDUCE::pb_MSG_BC_EU_REDUCE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_REDUCE::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_REDUCE::pb_MSG_BC_EU_REDUCE(const pb_MSG_BC_EU_REDUCE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_REDUCE::~pb_MSG_BC_EU_REDUCE() {
  SharedDtor();
}

void pb_MSG_BC_EU_REDUCE::SharedDtor() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcesplitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_REDUCE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_REDUCE_descriptor_;
}

const pb_MSG_BC_EU_REDUCE& pb_MSG_BC_EU_REDUCE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_REDUCE* pb_MSG_BC_EU_REDUCE::default_instance_ = NULL;

pb_MSG_BC_EU_REDUCE* pb_MSG_BC_EU_REDUCE::New() const {
  return new pb_MSG_BC_EU_REDUCE;
}

void pb_MSG_BC_EU_REDUCE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_sourcesplitname()) {
      if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
        sourcesplitname_->clear();
      }
    }
    sourcesplitnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_REDUCE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SourceSplitName;
        break;
      }
      
      // required string SourceSplitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SourceSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcesplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcesplitname().data(), this->sourcesplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SourcesplitNumber;
        break;
      }
      
      // required int32 SourcesplitNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourcesplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcesplitnumber_)));
          set_has_sourcesplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_REDUCE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceid(), output);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sourcesplitname(), output);
  }
  
  // required int32 SourcesplitNumber = 3;
  if (has_sourcesplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sourcesplitnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_REDUCE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceid(), target);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourcesplitname(), target);
  }
  
  // required int32 SourcesplitNumber = 3;
  if (has_sourcesplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sourcesplitnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_REDUCE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string SourceSplitName = 2;
    if (has_sourcesplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcesplitname());
    }
    
    // required int32 SourcesplitNumber = 3;
    if (has_sourcesplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcesplitnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_REDUCE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_REDUCE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_REDUCE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_REDUCE::MergeFrom(const pb_MSG_BC_EU_REDUCE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_sourcesplitname()) {
      set_sourcesplitname(from.sourcesplitname());
    }
    if (from.has_sourcesplitnumber()) {
      set_sourcesplitnumber(from.sourcesplitnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_REDUCE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE::CopyFrom(const pb_MSG_BC_EU_REDUCE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_REDUCE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_BC_EU_REDUCE::Swap(pb_MSG_BC_EU_REDUCE* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(sourcesplitname_, other->sourcesplitname_);
    std::swap(sourcesplitnumber_, other->sourcesplitnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_REDUCE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_REDUCE_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_REDUCE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_REDUCE_ACK_result::kKeyFieldNumber;
const int pb_MSG_BC_EU_REDUCE_ACK_result::kValueFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_REDUCE_ACK_result::pb_MSG_BC_EU_REDUCE_ACK_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_REDUCE_ACK_result::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_REDUCE_ACK_result::pb_MSG_BC_EU_REDUCE_ACK_result(const pb_MSG_BC_EU_REDUCE_ACK_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE_ACK_result::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_REDUCE_ACK_result::~pb_MSG_BC_EU_REDUCE_ACK_result() {
  SharedDtor();
}

void pb_MSG_BC_EU_REDUCE_ACK_result::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_REDUCE_ACK_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE_ACK_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_;
}

const pb_MSG_BC_EU_REDUCE_ACK_result& pb_MSG_BC_EU_REDUCE_ACK_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_REDUCE_ACK_result* pb_MSG_BC_EU_REDUCE_ACK_result::default_instance_ = NULL;

pb_MSG_BC_EU_REDUCE_ACK_result* pb_MSG_BC_EU_REDUCE_ACK_result::New() const {
  return new pb_MSG_BC_EU_REDUCE_ACK_result;
}

void pb_MSG_BC_EU_REDUCE_ACK_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_REDUCE_ACK_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_REDUCE_ACK_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_REDUCE_ACK_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_REDUCE_ACK_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_REDUCE_ACK_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_REDUCE_ACK_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_REDUCE_ACK_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_REDUCE_ACK_result::MergeFrom(const pb_MSG_BC_EU_REDUCE_ACK_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_REDUCE_ACK_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE_ACK_result::CopyFrom(const pb_MSG_BC_EU_REDUCE_ACK_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_REDUCE_ACK_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void pb_MSG_BC_EU_REDUCE_ACK_result::Swap(pb_MSG_BC_EU_REDUCE_ACK_result* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_REDUCE_ACK_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_REDUCE_ACK_result_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_REDUCE_ACK_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int pb_MSG_BC_EU_REDUCE_ACK::kResultListFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_REDUCE_ACK::pb_MSG_BC_EU_REDUCE_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_REDUCE_ACK::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_REDUCE_ACK::pb_MSG_BC_EU_REDUCE_ACK(const pb_MSG_BC_EU_REDUCE_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE_ACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_REDUCE_ACK::~pb_MSG_BC_EU_REDUCE_ACK() {
  SharedDtor();
}

void pb_MSG_BC_EU_REDUCE_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_REDUCE_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_REDUCE_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_REDUCE_ACK_descriptor_;
}

const pb_MSG_BC_EU_REDUCE_ACK& pb_MSG_BC_EU_REDUCE_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_REDUCE_ACK* pb_MSG_BC_EU_REDUCE_ACK::default_instance_ = NULL;

pb_MSG_BC_EU_REDUCE_ACK* pb_MSG_BC_EU_REDUCE_ACK::New() const {
  return new pb_MSG_BC_EU_REDUCE_ACK;
}

void pb_MSG_BC_EU_REDUCE_ACK::Clear() {
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_REDUCE_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_REDUCE_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_REDUCE_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_REDUCE_ACK::ByteSize() const {
  int total_size = 0;
  
  // repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_REDUCE_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_REDUCE_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_REDUCE_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_REDUCE_ACK::MergeFrom(const pb_MSG_BC_EU_REDUCE_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_REDUCE_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_REDUCE_ACK::CopyFrom(const pb_MSG_BC_EU_REDUCE_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_REDUCE_ACK::IsInitialized() const {
  
  for (int i = 0; i < result_list_size(); i++) {
    if (!this->result_list(i).IsInitialized()) return false;
  }
  return true;
}

void pb_MSG_BC_EU_REDUCE_ACK::Swap(pb_MSG_BC_EU_REDUCE_ACK* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_REDUCE_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_REDUCE_ACK_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_REDUCE_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_MSG_BC_EU_DELETE_DATA::kInstanceIDFieldNumber;
const int pb_MSG_BC_EU_DELETE_DATA::kSourceSplitNameFieldNumber;
const int pb_MSG_BC_EU_DELETE_DATA::kSourceSplitNumberFieldNumber;
#endif  // !_MSC_VER

pb_MSG_BC_EU_DELETE_DATA::pb_MSG_BC_EU_DELETE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pb_MSG_BC_EU_DELETE_DATA::InitAsDefaultInstance() {
}

pb_MSG_BC_EU_DELETE_DATA::pb_MSG_BC_EU_DELETE_DATA(const pb_MSG_BC_EU_DELETE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pb_MSG_BC_EU_DELETE_DATA::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcesplitnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_MSG_BC_EU_DELETE_DATA::~pb_MSG_BC_EU_DELETE_DATA() {
  SharedDtor();
}

void pb_MSG_BC_EU_DELETE_DATA::SharedDtor() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceid_;
  }
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcesplitname_;
  }
  if (this != default_instance_) {
  }
}

void pb_MSG_BC_EU_DELETE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_MSG_BC_EU_DELETE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_MSG_BC_EU_DELETE_DATA_descriptor_;
}

const pb_MSG_BC_EU_DELETE_DATA& pb_MSG_BC_EU_DELETE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();  return *default_instance_;
}

pb_MSG_BC_EU_DELETE_DATA* pb_MSG_BC_EU_DELETE_DATA::default_instance_ = NULL;

pb_MSG_BC_EU_DELETE_DATA* pb_MSG_BC_EU_DELETE_DATA::New() const {
  return new pb_MSG_BC_EU_DELETE_DATA;
}

void pb_MSG_BC_EU_DELETE_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceid()) {
      if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
        instanceid_->clear();
      }
    }
    if (has_sourcesplitname()) {
      if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
        sourcesplitname_->clear();
      }
    }
    sourcesplitnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_MSG_BC_EU_DELETE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceid().data(), this->instanceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SourceSplitName;
        break;
      }
      
      // required string SourceSplitName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SourceSplitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcesplitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcesplitname().data(), this->sourcesplitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SourceSplitNumber;
        break;
      }
      
      // required int32 SourceSplitNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SourceSplitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcesplitnumber_)));
          set_has_sourcesplitnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pb_MSG_BC_EU_DELETE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceid(), output);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sourcesplitname(), output);
  }
  
  // required int32 SourceSplitNumber = 3;
  if (has_sourcesplitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sourcesplitnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pb_MSG_BC_EU_DELETE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceid().data(), this->instanceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceid(), target);
  }
  
  // required string SourceSplitName = 2;
  if (has_sourcesplitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcesplitname().data(), this->sourcesplitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourcesplitname(), target);
  }
  
  // required int32 SourceSplitNumber = 3;
  if (has_sourcesplitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sourcesplitnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pb_MSG_BC_EU_DELETE_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceid());
    }
    
    // required string SourceSplitName = 2;
    if (has_sourcesplitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcesplitname());
    }
    
    // required int32 SourceSplitNumber = 3;
    if (has_sourcesplitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcesplitnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_MSG_BC_EU_DELETE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_MSG_BC_EU_DELETE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_MSG_BC_EU_DELETE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_MSG_BC_EU_DELETE_DATA::MergeFrom(const pb_MSG_BC_EU_DELETE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_sourcesplitname()) {
      set_sourcesplitname(from.sourcesplitname());
    }
    if (from.has_sourcesplitnumber()) {
      set_sourcesplitnumber(from.sourcesplitnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_MSG_BC_EU_DELETE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_MSG_BC_EU_DELETE_DATA::CopyFrom(const pb_MSG_BC_EU_DELETE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_MSG_BC_EU_DELETE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void pb_MSG_BC_EU_DELETE_DATA::Swap(pb_MSG_BC_EU_DELETE_DATA* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(sourcesplitname_, other->sourcesplitname_);
    std::swap(sourcesplitnumber_, other->sourcesplitnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_MSG_BC_EU_DELETE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_MSG_BC_EU_DELETE_DATA_descriptor_;
  metadata.reflection = pb_MSG_BC_EU_DELETE_DATA_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bc_eu

// @@protoc_insertion_point(global_scope)
