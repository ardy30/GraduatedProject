// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bc_eu.protocol.proto

#ifndef PROTOBUF_bc_5feu_2eprotocol_2eproto__INCLUDED
#define PROTOBUF_bc_5feu_2eprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bc_eu {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();

class pb_MSG_BC_EU_INIT_DATA;
class pb_MSG_BC_EU_MAP;
class pb_MSG_BC_EU_SHUFFLE;
class pb_MSG_BC_EU_SHUFFLE_IP_info;
class pb_MSG_BC_EU_REDUCE;
class pb_MSG_BC_EU_REDUCE_ACK;
class pb_MSG_BC_EU_REDUCE_ACK_result;
class pb_MSG_BC_EU_DELETE_DATA;

// ===================================================================

class pb_MSG_BC_EU_INIT_DATA : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_INIT_DATA();
  virtual ~pb_MSG_BC_EU_INIT_DATA();
  
  pb_MSG_BC_EU_INIT_DATA(const pb_MSG_BC_EU_INIT_DATA& from);
  
  inline pb_MSG_BC_EU_INIT_DATA& operator=(const pb_MSG_BC_EU_INIT_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_INIT_DATA& default_instance();
  
  void Swap(pb_MSG_BC_EU_INIT_DATA* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_INIT_DATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_INIT_DATA& from);
  void MergeFrom(const pb_MSG_BC_EU_INIT_DATA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string InstanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string Path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required string SplitName = 3;
  inline bool has_splitname() const;
  inline void clear_splitname();
  static const int kSplitNameFieldNumber = 3;
  inline const ::std::string& splitname() const;
  inline void set_splitname(const ::std::string& value);
  inline void set_splitname(const char* value);
  inline void set_splitname(const char* value, size_t size);
  inline ::std::string* mutable_splitname();
  inline ::std::string* release_splitname();
  
  // required int32 SplitNumber = 4;
  inline bool has_splitnumber() const;
  inline void clear_splitnumber();
  static const int kSplitNumberFieldNumber = 4;
  inline ::google::protobuf::int32 splitnumber() const;
  inline void set_splitnumber(::google::protobuf::int32 value);
  
  // required int32 StarLine = 5;
  inline bool has_starline() const;
  inline void clear_starline();
  static const int kStarLineFieldNumber = 5;
  inline ::google::protobuf::int32 starline() const;
  inline void set_starline(::google::protobuf::int32 value);
  
  // required int32 EndLine = 6;
  inline bool has_endline() const;
  inline void clear_endline();
  static const int kEndLineFieldNumber = 6;
  inline ::google::protobuf::int32 endline() const;
  inline void set_endline(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_INIT_DATA)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_splitname();
  inline void clear_has_splitname();
  inline void set_has_splitnumber();
  inline void clear_has_splitnumber();
  inline void set_has_starline();
  inline void clear_has_starline();
  inline void set_has_endline();
  inline void clear_has_endline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceid_;
  ::std::string* path_;
  ::std::string* splitname_;
  ::google::protobuf::int32 splitnumber_;
  ::google::protobuf::int32 starline_;
  ::google::protobuf::int32 endline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_INIT_DATA* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_MAP : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_MAP();
  virtual ~pb_MSG_BC_EU_MAP();
  
  pb_MSG_BC_EU_MAP(const pb_MSG_BC_EU_MAP& from);
  
  inline pb_MSG_BC_EU_MAP& operator=(const pb_MSG_BC_EU_MAP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_MAP& default_instance();
  
  void Swap(pb_MSG_BC_EU_MAP* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_MAP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_MAP& from);
  void MergeFrom(const pb_MSG_BC_EU_MAP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  
  // repeated string Para = 2;
  inline int para_size() const;
  inline void clear_para();
  static const int kParaFieldNumber = 2;
  inline const ::std::string& para(int index) const;
  inline ::std::string* mutable_para(int index);
  inline void set_para(int index, const ::std::string& value);
  inline void set_para(int index, const char* value);
  inline void set_para(int index, const char* value, size_t size);
  inline ::std::string* add_para();
  inline void add_para(const ::std::string& value);
  inline void add_para(const char* value);
  inline void add_para(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& para() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_para();
  
  // required string InstanceID = 3;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 3;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string SourceSplitName = 4;
  inline bool has_sourcesplitname() const;
  inline void clear_sourcesplitname();
  static const int kSourceSplitNameFieldNumber = 4;
  inline const ::std::string& sourcesplitname() const;
  inline void set_sourcesplitname(const ::std::string& value);
  inline void set_sourcesplitname(const char* value);
  inline void set_sourcesplitname(const char* value, size_t size);
  inline ::std::string* mutable_sourcesplitname();
  inline ::std::string* release_sourcesplitname();
  
  // required int32 SourceSplitNumber = 5;
  inline bool has_sourcesplitnumber() const;
  inline void clear_sourcesplitnumber();
  static const int kSourceSplitNumberFieldNumber = 5;
  inline ::google::protobuf::int32 sourcesplitnumber() const;
  inline void set_sourcesplitnumber(::google::protobuf::int32 value);
  
  // required string DestSplitName = 6;
  inline bool has_destsplitname() const;
  inline void clear_destsplitname();
  static const int kDestSplitNameFieldNumber = 6;
  inline const ::std::string& destsplitname() const;
  inline void set_destsplitname(const ::std::string& value);
  inline void set_destsplitname(const char* value);
  inline void set_destsplitname(const char* value, size_t size);
  inline ::std::string* mutable_destsplitname();
  inline ::std::string* release_destsplitname();
  
  // required int32 DestSplitNumber = 7;
  inline bool has_destsplitnumber() const;
  inline void clear_destsplitnumber();
  static const int kDestSplitNumberFieldNumber = 7;
  inline ::google::protobuf::int32 destsplitnumber() const;
  inline void set_destsplitnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_MAP)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_sourcesplitname();
  inline void clear_has_sourcesplitname();
  inline void set_has_sourcesplitnumber();
  inline void clear_has_sourcesplitnumber();
  inline void set_has_destsplitname();
  inline void clear_has_destsplitname();
  inline void set_has_destsplitnumber();
  inline void clear_has_destsplitnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cmd_;
  ::google::protobuf::RepeatedPtrField< ::std::string> para_;
  ::std::string* instanceid_;
  ::std::string* sourcesplitname_;
  ::std::string* destsplitname_;
  ::google::protobuf::int32 sourcesplitnumber_;
  ::google::protobuf::int32 destsplitnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_MAP* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_SHUFFLE_IP_info : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_SHUFFLE_IP_info();
  virtual ~pb_MSG_BC_EU_SHUFFLE_IP_info();
  
  pb_MSG_BC_EU_SHUFFLE_IP_info(const pb_MSG_BC_EU_SHUFFLE_IP_info& from);
  
  inline pb_MSG_BC_EU_SHUFFLE_IP_info& operator=(const pb_MSG_BC_EU_SHUFFLE_IP_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_SHUFFLE_IP_info& default_instance();
  
  void Swap(pb_MSG_BC_EU_SHUFFLE_IP_info* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_SHUFFLE_IP_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_SHUFFLE_IP_info& from);
  void MergeFrom(const pb_MSG_BC_EU_SHUFFLE_IP_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required string IP = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ip();
  inline void clear_has_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_SHUFFLE_IP_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_SHUFFLE : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_SHUFFLE();
  virtual ~pb_MSG_BC_EU_SHUFFLE();
  
  pb_MSG_BC_EU_SHUFFLE(const pb_MSG_BC_EU_SHUFFLE& from);
  
  inline pb_MSG_BC_EU_SHUFFLE& operator=(const pb_MSG_BC_EU_SHUFFLE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_SHUFFLE& default_instance();
  
  void Swap(pb_MSG_BC_EU_SHUFFLE* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_SHUFFLE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_SHUFFLE& from);
  void MergeFrom(const pb_MSG_BC_EU_SHUFFLE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef pb_MSG_BC_EU_SHUFFLE_IP_info IP_info;
  
  // accessors -------------------------------------------------------
  
  // required string InstanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string SourceSplitName = 2;
  inline bool has_sourcesplitname() const;
  inline void clear_sourcesplitname();
  static const int kSourceSplitNameFieldNumber = 2;
  inline const ::std::string& sourcesplitname() const;
  inline void set_sourcesplitname(const ::std::string& value);
  inline void set_sourcesplitname(const char* value);
  inline void set_sourcesplitname(const char* value, size_t size);
  inline ::std::string* mutable_sourcesplitname();
  inline ::std::string* release_sourcesplitname();
  
  // required int32 SourceSplitNumber = 3;
  inline bool has_sourcesplitnumber() const;
  inline void clear_sourcesplitnumber();
  static const int kSourceSplitNumberFieldNumber = 3;
  inline ::google::protobuf::int32 sourcesplitnumber() const;
  inline void set_sourcesplitnumber(::google::protobuf::int32 value);
  
  // required string DestSplitName = 4;
  inline bool has_destsplitname() const;
  inline void clear_destsplitname();
  static const int kDestSplitNameFieldNumber = 4;
  inline const ::std::string& destsplitname() const;
  inline void set_destsplitname(const ::std::string& value);
  inline void set_destsplitname(const char* value);
  inline void set_destsplitname(const char* value, size_t size);
  inline ::std::string* mutable_destsplitname();
  inline ::std::string* release_destsplitname();
  
  // required int32 DestSplitNummber = 5;
  inline bool has_destsplitnummber() const;
  inline void clear_destsplitnummber();
  static const int kDestSplitNummberFieldNumber = 5;
  inline ::google::protobuf::int32 destsplitnummber() const;
  inline void set_destsplitnummber(::google::protobuf::int32 value);
  
  // required int32 MO = 6;
  inline bool has_mo() const;
  inline void clear_mo();
  static const int kMOFieldNumber = 6;
  inline ::google::protobuf::int32 mo() const;
  inline void set_mo(::google::protobuf::int32 value);
  
  // repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
  inline int ip_info_list_size() const;
  inline void clear_ip_info_list();
  static const int kIPInfoListFieldNumber = 7;
  inline const ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info& ip_info_list(int index) const;
  inline ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info* mutable_ip_info_list(int index);
  inline ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info* add_ip_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info >&
      ip_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info >*
      mutable_ip_info_list();
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_SHUFFLE)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_sourcesplitname();
  inline void clear_has_sourcesplitname();
  inline void set_has_sourcesplitnumber();
  inline void clear_has_sourcesplitnumber();
  inline void set_has_destsplitname();
  inline void clear_has_destsplitname();
  inline void set_has_destsplitnummber();
  inline void clear_has_destsplitnummber();
  inline void set_has_mo();
  inline void clear_has_mo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceid_;
  ::std::string* sourcesplitname_;
  ::std::string* destsplitname_;
  ::google::protobuf::int32 sourcesplitnumber_;
  ::google::protobuf::int32 destsplitnummber_;
  ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info > ip_info_list_;
  ::google::protobuf::int32 mo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_SHUFFLE* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_REDUCE : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_REDUCE();
  virtual ~pb_MSG_BC_EU_REDUCE();
  
  pb_MSG_BC_EU_REDUCE(const pb_MSG_BC_EU_REDUCE& from);
  
  inline pb_MSG_BC_EU_REDUCE& operator=(const pb_MSG_BC_EU_REDUCE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_REDUCE& default_instance();
  
  void Swap(pb_MSG_BC_EU_REDUCE* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_REDUCE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_REDUCE& from);
  void MergeFrom(const pb_MSG_BC_EU_REDUCE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string InstanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string SourceSplitName = 2;
  inline bool has_sourcesplitname() const;
  inline void clear_sourcesplitname();
  static const int kSourceSplitNameFieldNumber = 2;
  inline const ::std::string& sourcesplitname() const;
  inline void set_sourcesplitname(const ::std::string& value);
  inline void set_sourcesplitname(const char* value);
  inline void set_sourcesplitname(const char* value, size_t size);
  inline ::std::string* mutable_sourcesplitname();
  inline ::std::string* release_sourcesplitname();
  
  // required int32 SourcesplitNumber = 3;
  inline bool has_sourcesplitnumber() const;
  inline void clear_sourcesplitnumber();
  static const int kSourcesplitNumberFieldNumber = 3;
  inline ::google::protobuf::int32 sourcesplitnumber() const;
  inline void set_sourcesplitnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_REDUCE)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_sourcesplitname();
  inline void clear_has_sourcesplitname();
  inline void set_has_sourcesplitnumber();
  inline void clear_has_sourcesplitnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceid_;
  ::std::string* sourcesplitname_;
  ::google::protobuf::int32 sourcesplitnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_REDUCE* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_REDUCE_ACK_result : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_REDUCE_ACK_result();
  virtual ~pb_MSG_BC_EU_REDUCE_ACK_result();
  
  pb_MSG_BC_EU_REDUCE_ACK_result(const pb_MSG_BC_EU_REDUCE_ACK_result& from);
  
  inline pb_MSG_BC_EU_REDUCE_ACK_result& operator=(const pb_MSG_BC_EU_REDUCE_ACK_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_REDUCE_ACK_result& default_instance();
  
  void Swap(pb_MSG_BC_EU_REDUCE_ACK_result* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_REDUCE_ACK_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_REDUCE_ACK_result& from);
  void MergeFrom(const pb_MSG_BC_EU_REDUCE_ACK_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_REDUCE_ACK_result* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_REDUCE_ACK : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_REDUCE_ACK();
  virtual ~pb_MSG_BC_EU_REDUCE_ACK();
  
  pb_MSG_BC_EU_REDUCE_ACK(const pb_MSG_BC_EU_REDUCE_ACK& from);
  
  inline pb_MSG_BC_EU_REDUCE_ACK& operator=(const pb_MSG_BC_EU_REDUCE_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_REDUCE_ACK& default_instance();
  
  void Swap(pb_MSG_BC_EU_REDUCE_ACK* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_REDUCE_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_REDUCE_ACK& from);
  void MergeFrom(const pb_MSG_BC_EU_REDUCE_ACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef pb_MSG_BC_EU_REDUCE_ACK_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
  inline int result_list_size() const;
  inline void clear_result_list();
  static const int kResultListFieldNumber = 1;
  inline const ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result& result_list(int index) const;
  inline ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result* mutable_result_list(int index);
  inline ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result* add_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result >&
      result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result >*
      mutable_result_list();
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_REDUCE_ACK)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result > result_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_REDUCE_ACK* default_instance_;
};
// -------------------------------------------------------------------

class pb_MSG_BC_EU_DELETE_DATA : public ::google::protobuf::Message {
 public:
  pb_MSG_BC_EU_DELETE_DATA();
  virtual ~pb_MSG_BC_EU_DELETE_DATA();
  
  pb_MSG_BC_EU_DELETE_DATA(const pb_MSG_BC_EU_DELETE_DATA& from);
  
  inline pb_MSG_BC_EU_DELETE_DATA& operator=(const pb_MSG_BC_EU_DELETE_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_MSG_BC_EU_DELETE_DATA& default_instance();
  
  void Swap(pb_MSG_BC_EU_DELETE_DATA* other);
  
  // implements Message ----------------------------------------------
  
  pb_MSG_BC_EU_DELETE_DATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_MSG_BC_EU_DELETE_DATA& from);
  void MergeFrom(const pb_MSG_BC_EU_DELETE_DATA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string InstanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline const ::std::string& instanceid() const;
  inline void set_instanceid(const ::std::string& value);
  inline void set_instanceid(const char* value);
  inline void set_instanceid(const char* value, size_t size);
  inline ::std::string* mutable_instanceid();
  inline ::std::string* release_instanceid();
  
  // required string SourceSplitName = 2;
  inline bool has_sourcesplitname() const;
  inline void clear_sourcesplitname();
  static const int kSourceSplitNameFieldNumber = 2;
  inline const ::std::string& sourcesplitname() const;
  inline void set_sourcesplitname(const ::std::string& value);
  inline void set_sourcesplitname(const char* value);
  inline void set_sourcesplitname(const char* value, size_t size);
  inline ::std::string* mutable_sourcesplitname();
  inline ::std::string* release_sourcesplitname();
  
  // required int32 SourceSplitNumber = 3;
  inline bool has_sourcesplitnumber() const;
  inline void clear_sourcesplitnumber();
  static const int kSourceSplitNumberFieldNumber = 3;
  inline ::google::protobuf::int32 sourcesplitnumber() const;
  inline void set_sourcesplitnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bc_eu.pb_MSG_BC_EU_DELETE_DATA)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_sourcesplitname();
  inline void clear_has_sourcesplitname();
  inline void set_has_sourcesplitnumber();
  inline void clear_has_sourcesplitnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceid_;
  ::std::string* sourcesplitname_;
  ::google::protobuf::int32 sourcesplitnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_AssignDesc_bc_5feu_2eprotocol_2eproto();
  friend void protobuf_ShutdownFile_bc_5feu_2eprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static pb_MSG_BC_EU_DELETE_DATA* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_MSG_BC_EU_INIT_DATA

// required string InstanceID = 1;
inline bool pb_MSG_BC_EU_INIT_DATA::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_BC_EU_INIT_DATA::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string Path = 2;
inline bool pb_MSG_BC_EU_INIT_DATA::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& pb_MSG_BC_EU_INIT_DATA::path() const {
  return *path_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SplitName = 3;
inline bool pb_MSG_BC_EU_INIT_DATA::has_splitname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_splitname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_splitname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_splitname() {
  if (splitname_ != &::google::protobuf::internal::kEmptyString) {
    splitname_->clear();
  }
  clear_has_splitname();
}
inline const ::std::string& pb_MSG_BC_EU_INIT_DATA::splitname() const {
  return *splitname_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_splitname(const ::std::string& value) {
  set_has_splitname();
  if (splitname_ == &::google::protobuf::internal::kEmptyString) {
    splitname_ = new ::std::string;
  }
  splitname_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_splitname(const char* value) {
  set_has_splitname();
  if (splitname_ == &::google::protobuf::internal::kEmptyString) {
    splitname_ = new ::std::string;
  }
  splitname_->assign(value);
}
inline void pb_MSG_BC_EU_INIT_DATA::set_splitname(const char* value, size_t size) {
  set_has_splitname();
  if (splitname_ == &::google::protobuf::internal::kEmptyString) {
    splitname_ = new ::std::string;
  }
  splitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::mutable_splitname() {
  set_has_splitname();
  if (splitname_ == &::google::protobuf::internal::kEmptyString) {
    splitname_ = new ::std::string;
  }
  return splitname_;
}
inline ::std::string* pb_MSG_BC_EU_INIT_DATA::release_splitname() {
  clear_has_splitname();
  if (splitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splitname_;
    splitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 SplitNumber = 4;
inline bool pb_MSG_BC_EU_INIT_DATA::has_splitnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_splitnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_splitnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_splitnumber() {
  splitnumber_ = 0;
  clear_has_splitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_INIT_DATA::splitnumber() const {
  return splitnumber_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_splitnumber(::google::protobuf::int32 value) {
  set_has_splitnumber();
  splitnumber_ = value;
}

// required int32 StarLine = 5;
inline bool pb_MSG_BC_EU_INIT_DATA::has_starline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_starline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_starline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_starline() {
  starline_ = 0;
  clear_has_starline();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_INIT_DATA::starline() const {
  return starline_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_starline(::google::protobuf::int32 value) {
  set_has_starline();
  starline_ = value;
}

// required int32 EndLine = 6;
inline bool pb_MSG_BC_EU_INIT_DATA::has_endline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_has_endline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_has_endline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_MSG_BC_EU_INIT_DATA::clear_endline() {
  endline_ = 0;
  clear_has_endline();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_INIT_DATA::endline() const {
  return endline_;
}
inline void pb_MSG_BC_EU_INIT_DATA::set_endline(::google::protobuf::int32 value) {
  set_has_endline();
  endline_ = value;
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_MAP

// required string Cmd = 1;
inline bool pb_MSG_BC_EU_MAP::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_MAP::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& pb_MSG_BC_EU_MAP::cmd() const {
  return *cmd_;
}
inline void pb_MSG_BC_EU_MAP::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_MAP::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* pb_MSG_BC_EU_MAP::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string Para = 2;
inline int pb_MSG_BC_EU_MAP::para_size() const {
  return para_.size();
}
inline void pb_MSG_BC_EU_MAP::clear_para() {
  para_.Clear();
}
inline const ::std::string& pb_MSG_BC_EU_MAP::para(int index) const {
  return para_.Get(index);
}
inline ::std::string* pb_MSG_BC_EU_MAP::mutable_para(int index) {
  return para_.Mutable(index);
}
inline void pb_MSG_BC_EU_MAP::set_para(int index, const ::std::string& value) {
  para_.Mutable(index)->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_para(int index, const char* value) {
  para_.Mutable(index)->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_para(int index, const char* value, size_t size) {
  para_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_MAP::add_para() {
  return para_.Add();
}
inline void pb_MSG_BC_EU_MAP::add_para(const ::std::string& value) {
  para_.Add()->assign(value);
}
inline void pb_MSG_BC_EU_MAP::add_para(const char* value) {
  para_.Add()->assign(value);
}
inline void pb_MSG_BC_EU_MAP::add_para(const char* value, size_t size) {
  para_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pb_MSG_BC_EU_MAP::para() const {
  return para_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pb_MSG_BC_EU_MAP::mutable_para() {
  return &para_;
}

// required string InstanceID = 3;
inline bool pb_MSG_BC_EU_MAP::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_BC_EU_MAP::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_BC_EU_MAP::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_BC_EU_MAP::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_MAP::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_BC_EU_MAP::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SourceSplitName = 4;
inline bool pb_MSG_BC_EU_MAP::has_sourcesplitname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_sourcesplitname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_sourcesplitname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_MSG_BC_EU_MAP::clear_sourcesplitname() {
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_->clear();
  }
  clear_has_sourcesplitname();
}
inline const ::std::string& pb_MSG_BC_EU_MAP::sourcesplitname() const {
  return *sourcesplitname_;
}
inline void pb_MSG_BC_EU_MAP::set_sourcesplitname(const ::std::string& value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_sourcesplitname(const char* value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_sourcesplitname(const char* value, size_t size) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_MAP::mutable_sourcesplitname() {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  return sourcesplitname_;
}
inline ::std::string* pb_MSG_BC_EU_MAP::release_sourcesplitname() {
  clear_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcesplitname_;
    sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 SourceSplitNumber = 5;
inline bool pb_MSG_BC_EU_MAP::has_sourcesplitnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_sourcesplitnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_sourcesplitnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_MSG_BC_EU_MAP::clear_sourcesplitnumber() {
  sourcesplitnumber_ = 0;
  clear_has_sourcesplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_MAP::sourcesplitnumber() const {
  return sourcesplitnumber_;
}
inline void pb_MSG_BC_EU_MAP::set_sourcesplitnumber(::google::protobuf::int32 value) {
  set_has_sourcesplitnumber();
  sourcesplitnumber_ = value;
}

// required string DestSplitName = 6;
inline bool pb_MSG_BC_EU_MAP::has_destsplitname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_destsplitname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_destsplitname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_MSG_BC_EU_MAP::clear_destsplitname() {
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    destsplitname_->clear();
  }
  clear_has_destsplitname();
}
inline const ::std::string& pb_MSG_BC_EU_MAP::destsplitname() const {
  return *destsplitname_;
}
inline void pb_MSG_BC_EU_MAP::set_destsplitname(const ::std::string& value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_destsplitname(const char* value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_BC_EU_MAP::set_destsplitname(const char* value, size_t size) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_MAP::mutable_destsplitname() {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  return destsplitname_;
}
inline ::std::string* pb_MSG_BC_EU_MAP::release_destsplitname() {
  clear_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destsplitname_;
    destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 DestSplitNumber = 7;
inline bool pb_MSG_BC_EU_MAP::has_destsplitnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_MSG_BC_EU_MAP::set_has_destsplitnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_MSG_BC_EU_MAP::clear_has_destsplitnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_MSG_BC_EU_MAP::clear_destsplitnumber() {
  destsplitnumber_ = 0;
  clear_has_destsplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_MAP::destsplitnumber() const {
  return destsplitnumber_;
}
inline void pb_MSG_BC_EU_MAP::set_destsplitnumber(::google::protobuf::int32 value) {
  set_has_destsplitnumber();
  destsplitnumber_ = value;
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_SHUFFLE_IP_info

// required int32 key = 1;
inline bool pb_MSG_BC_EU_SHUFFLE_IP_info::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_SHUFFLE_IP_info::key() const {
  return key_;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string IP = 2;
inline bool pb_MSG_BC_EU_SHUFFLE_IP_info::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& pb_MSG_BC_EU_SHUFFLE_IP_info::ip() const {
  return *ip_;
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE_IP_info::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE_IP_info::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE_IP_info::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_SHUFFLE

// required string InstanceID = 1;
inline bool pb_MSG_BC_EU_SHUFFLE::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_BC_EU_SHUFFLE::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SourceSplitName = 2;
inline bool pb_MSG_BC_EU_SHUFFLE::has_sourcesplitname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_sourcesplitname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_sourcesplitname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_sourcesplitname() {
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_->clear();
  }
  clear_has_sourcesplitname();
}
inline const ::std::string& pb_MSG_BC_EU_SHUFFLE::sourcesplitname() const {
  return *sourcesplitname_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_sourcesplitname(const ::std::string& value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_sourcesplitname(const char* value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_sourcesplitname(const char* value, size_t size) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::mutable_sourcesplitname() {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  return sourcesplitname_;
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::release_sourcesplitname() {
  clear_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcesplitname_;
    sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 SourceSplitNumber = 3;
inline bool pb_MSG_BC_EU_SHUFFLE::has_sourcesplitnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_sourcesplitnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_sourcesplitnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_sourcesplitnumber() {
  sourcesplitnumber_ = 0;
  clear_has_sourcesplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_SHUFFLE::sourcesplitnumber() const {
  return sourcesplitnumber_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_sourcesplitnumber(::google::protobuf::int32 value) {
  set_has_sourcesplitnumber();
  sourcesplitnumber_ = value;
}

// required string DestSplitName = 4;
inline bool pb_MSG_BC_EU_SHUFFLE::has_destsplitname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_destsplitname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_destsplitname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_destsplitname() {
  if (destsplitname_ != &::google::protobuf::internal::kEmptyString) {
    destsplitname_->clear();
  }
  clear_has_destsplitname();
}
inline const ::std::string& pb_MSG_BC_EU_SHUFFLE::destsplitname() const {
  return *destsplitname_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_destsplitname(const ::std::string& value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_destsplitname(const char* value) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(value);
}
inline void pb_MSG_BC_EU_SHUFFLE::set_destsplitname(const char* value, size_t size) {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  destsplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::mutable_destsplitname() {
  set_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    destsplitname_ = new ::std::string;
  }
  return destsplitname_;
}
inline ::std::string* pb_MSG_BC_EU_SHUFFLE::release_destsplitname() {
  clear_has_destsplitname();
  if (destsplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destsplitname_;
    destsplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 DestSplitNummber = 5;
inline bool pb_MSG_BC_EU_SHUFFLE::has_destsplitnummber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_destsplitnummber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_destsplitnummber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_destsplitnummber() {
  destsplitnummber_ = 0;
  clear_has_destsplitnummber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_SHUFFLE::destsplitnummber() const {
  return destsplitnummber_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_destsplitnummber(::google::protobuf::int32 value) {
  set_has_destsplitnummber();
  destsplitnummber_ = value;
}

// required int32 MO = 6;
inline bool pb_MSG_BC_EU_SHUFFLE::has_mo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_has_mo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_has_mo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_mo() {
  mo_ = 0;
  clear_has_mo();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_SHUFFLE::mo() const {
  return mo_;
}
inline void pb_MSG_BC_EU_SHUFFLE::set_mo(::google::protobuf::int32 value) {
  set_has_mo();
  mo_ = value;
}

// repeated .bc_eu.pb_MSG_BC_EU_SHUFFLE.IP_info IP_info_List = 7;
inline int pb_MSG_BC_EU_SHUFFLE::ip_info_list_size() const {
  return ip_info_list_.size();
}
inline void pb_MSG_BC_EU_SHUFFLE::clear_ip_info_list() {
  ip_info_list_.Clear();
}
inline const ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info& pb_MSG_BC_EU_SHUFFLE::ip_info_list(int index) const {
  return ip_info_list_.Get(index);
}
inline ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info* pb_MSG_BC_EU_SHUFFLE::mutable_ip_info_list(int index) {
  return ip_info_list_.Mutable(index);
}
inline ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info* pb_MSG_BC_EU_SHUFFLE::add_ip_info_list() {
  return ip_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info >&
pb_MSG_BC_EU_SHUFFLE::ip_info_list() const {
  return ip_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_SHUFFLE_IP_info >*
pb_MSG_BC_EU_SHUFFLE::mutable_ip_info_list() {
  return &ip_info_list_;
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_REDUCE

// required string InstanceID = 1;
inline bool pb_MSG_BC_EU_REDUCE::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_REDUCE::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_BC_EU_REDUCE::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_BC_EU_REDUCE::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_REDUCE::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_BC_EU_REDUCE::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SourceSplitName = 2;
inline bool pb_MSG_BC_EU_REDUCE::has_sourcesplitname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_REDUCE::set_has_sourcesplitname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_has_sourcesplitname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_sourcesplitname() {
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_->clear();
  }
  clear_has_sourcesplitname();
}
inline const ::std::string& pb_MSG_BC_EU_REDUCE::sourcesplitname() const {
  return *sourcesplitname_;
}
inline void pb_MSG_BC_EU_REDUCE::set_sourcesplitname(const ::std::string& value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE::set_sourcesplitname(const char* value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE::set_sourcesplitname(const char* value, size_t size) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_REDUCE::mutable_sourcesplitname() {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  return sourcesplitname_;
}
inline ::std::string* pb_MSG_BC_EU_REDUCE::release_sourcesplitname() {
  clear_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcesplitname_;
    sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 SourcesplitNumber = 3;
inline bool pb_MSG_BC_EU_REDUCE::has_sourcesplitnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_BC_EU_REDUCE::set_has_sourcesplitnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_has_sourcesplitnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_BC_EU_REDUCE::clear_sourcesplitnumber() {
  sourcesplitnumber_ = 0;
  clear_has_sourcesplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_REDUCE::sourcesplitnumber() const {
  return sourcesplitnumber_;
}
inline void pb_MSG_BC_EU_REDUCE::set_sourcesplitnumber(::google::protobuf::int32 value) {
  set_has_sourcesplitnumber();
  sourcesplitnumber_ = value;
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_REDUCE_ACK_result

// required string key = 1;
inline bool pb_MSG_BC_EU_REDUCE_ACK_result::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& pb_MSG_BC_EU_REDUCE_ACK_result::key() const {
  return *key_;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_REDUCE_ACK_result::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* pb_MSG_BC_EU_REDUCE_ACK_result::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool pb_MSG_BC_EU_REDUCE_ACK_result::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& pb_MSG_BC_EU_REDUCE_ACK_result::value() const {
  return *value_;
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void pb_MSG_BC_EU_REDUCE_ACK_result::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_REDUCE_ACK_result::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* pb_MSG_BC_EU_REDUCE_ACK_result::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_REDUCE_ACK

// repeated .bc_eu.pb_MSG_BC_EU_REDUCE_ACK.result result_list = 1;
inline int pb_MSG_BC_EU_REDUCE_ACK::result_list_size() const {
  return result_list_.size();
}
inline void pb_MSG_BC_EU_REDUCE_ACK::clear_result_list() {
  result_list_.Clear();
}
inline const ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result& pb_MSG_BC_EU_REDUCE_ACK::result_list(int index) const {
  return result_list_.Get(index);
}
inline ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result* pb_MSG_BC_EU_REDUCE_ACK::mutable_result_list(int index) {
  return result_list_.Mutable(index);
}
inline ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result* pb_MSG_BC_EU_REDUCE_ACK::add_result_list() {
  return result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result >&
pb_MSG_BC_EU_REDUCE_ACK::result_list() const {
  return result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bc_eu::pb_MSG_BC_EU_REDUCE_ACK_result >*
pb_MSG_BC_EU_REDUCE_ACK::mutable_result_list() {
  return &result_list_;
}

// -------------------------------------------------------------------

// pb_MSG_BC_EU_DELETE_DATA

// required string InstanceID = 1;
inline bool pb_MSG_BC_EU_DELETE_DATA::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_instanceid() {
  if (instanceid_ != &::google::protobuf::internal::kEmptyString) {
    instanceid_->clear();
  }
  clear_has_instanceid();
}
inline const ::std::string& pb_MSG_BC_EU_DELETE_DATA::instanceid() const {
  return *instanceid_;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_instanceid(const ::std::string& value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_instanceid(const char* value) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(value);
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_instanceid(const char* value, size_t size) {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  instanceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_DELETE_DATA::mutable_instanceid() {
  set_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    instanceid_ = new ::std::string;
  }
  return instanceid_;
}
inline ::std::string* pb_MSG_BC_EU_DELETE_DATA::release_instanceid() {
  clear_has_instanceid();
  if (instanceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceid_;
    instanceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SourceSplitName = 2;
inline bool pb_MSG_BC_EU_DELETE_DATA::has_sourcesplitname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_has_sourcesplitname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_has_sourcesplitname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_sourcesplitname() {
  if (sourcesplitname_ != &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_->clear();
  }
  clear_has_sourcesplitname();
}
inline const ::std::string& pb_MSG_BC_EU_DELETE_DATA::sourcesplitname() const {
  return *sourcesplitname_;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_sourcesplitname(const ::std::string& value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_sourcesplitname(const char* value) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(value);
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_sourcesplitname(const char* value, size_t size) {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  sourcesplitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pb_MSG_BC_EU_DELETE_DATA::mutable_sourcesplitname() {
  set_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    sourcesplitname_ = new ::std::string;
  }
  return sourcesplitname_;
}
inline ::std::string* pb_MSG_BC_EU_DELETE_DATA::release_sourcesplitname() {
  clear_has_sourcesplitname();
  if (sourcesplitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcesplitname_;
    sourcesplitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 SourceSplitNumber = 3;
inline bool pb_MSG_BC_EU_DELETE_DATA::has_sourcesplitnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_has_sourcesplitnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_has_sourcesplitnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_MSG_BC_EU_DELETE_DATA::clear_sourcesplitnumber() {
  sourcesplitnumber_ = 0;
  clear_has_sourcesplitnumber();
}
inline ::google::protobuf::int32 pb_MSG_BC_EU_DELETE_DATA::sourcesplitnumber() const {
  return sourcesplitnumber_;
}
inline void pb_MSG_BC_EU_DELETE_DATA::set_sourcesplitnumber(::google::protobuf::int32 value) {
  set_has_sourcesplitnumber();
  sourcesplitnumber_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bc_eu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bc_5feu_2eprotocol_2eproto__INCLUDED
